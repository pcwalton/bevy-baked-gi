<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpGLTF.Core</name>
    </assembly>
    <members>
        <member name="T:SharpGLTF.Animations.CurveSampler">
            <summary>
            Utility class to create samplers from curve collections.
            </summary>
        </member>
        <member name="M:SharpGLTF.Animations.CurveSampler.CreateHermitePointWeights(System.Single)">
            <summary>
            Calculates the Hermite point weights for a given <paramref name="amount"/>
            </summary>
            <param name="amount">The input amount (must be between 0 and 1)</param>
            <returns>
            The output weights.
            - StartPosition: Weight for Start point
            - EndPosition: Weight for End point
            - StartTangent: Weight for Start Outgoing Tangent
            - EndTangent: Weight for End Incoming Tangent
            </returns>
        </member>
        <member name="M:SharpGLTF.Animations.CurveSampler.CreateHermiteTangentWeights(System.Single)">
            <summary>
            Calculates the Hermite tangent weights for a given <paramref name="amount"/>
            </summary>
            <param name="amount">The input amount (must be between 0 and 1)</param>
            <returns>
            The output weights.
            - StartPosition: Weight for Start point
            - EndPosition: Weight for End point
            - StartTangent: Weight for Start Outgoing Tangent
            - EndTangent: Weight for End Incoming Tangent
            </returns>
        </member>
        <member name="M:SharpGLTF.Animations.CurveSampler.FindRangeContainingOffset``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,``0}},System.Single)">
            <summary>
            Given a <paramref name="sequence"/> of float+<typeparamref name="T"/> pairs and an <paramref name="offset"/>,
            it finds two consecutive values that contain <paramref name="offset"/> between them.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="sequence">A sequence of float+<typeparamref name="T"/> pairs sorted in ascending order.</param>
            <param name="offset">the offset to look for in the sequence.</param>
            <returns>Two consecutive <typeparamref name="T"/> values and a float amount to LERP amount.</returns>
        </member>
        <member name="M:SharpGLTF.Animations.CurveSampler.FindRangeContainingOffset(System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>
            Given a <paramref name="sequence"/> of offsets and an <paramref name="offset"/>,
            it finds two consecutive offsets that contain <paramref name="offset"/> between them.
            </summary>
            <param name="sequence">A sequence of offsets sorted in ascending order.</param>
            <param name="offset">the offset to look for in the sequence.</param>
            <returns>Two consecutive offsets and a LERP amount.</returns>
        </member>
        <member name="M:SharpGLTF.Animations.CurveSampler.SplitByTime``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,``0}})">
            <summary>
            Splits the input sequence into chunks of 1 second for faster access
            </summary>
            <remarks>
             The first and last keys outside the range of each chunk are duplicated, so each chunk can be evaluated for the whole second.
            </remarks>
            <typeparam name="T">The curve key type.</typeparam>
            <param name="sequence">A timed sequence of curve keys.</param>
            <returns>A sequence of 1 second chunks.</returns>
        </member>
        <member name="T:SharpGLTF.Animations.FixedSampler`1">
            <summary>
            Represents a special sampler for single values.
            </summary>
            <typeparam name="T">The sample type.</typeparam>
        </member>
        <member name="T:SharpGLTF.Animations.FastCurveSampler`1">
            <summary>
            Wraps a collection of samplers split over time to speed up key retrieval.
            </summary>
            <typeparam name="T">The value sampled at any offset</typeparam>
        </member>
        <member name="M:SharpGLTF.Animations.FastCurveSampler`1.CreateFrom``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,``0}},System.Func{System.ValueTuple{System.Single,``0}[],SharpGLTF.Animations.ICurveSampler{`0}})">
            <summary>
            Creates a new, read only <see cref="T:SharpGLTF.Animations.ICurveSampler`1"/> that has been optimized for fast sampling.
            </summary>
            <remarks>
            Sampling a raw curve with a large number of keys can be underperformant. This code splits the keys into 1 second
            chunks that can be accessed at much faster speed.
            </remarks>
            <typeparam name="TKey">The value of a key (may include tangents)</typeparam>
            <param name="sequence">A sequence of Time-Key entries, ordered by Time.</param>
            <param name="chunkFactory">A curve chunk factory function.</param>
            <returns>The new, optimized curve sampler.</returns>
        </member>
        <member name="T:SharpGLTF.Animations.ICurveSampler`1">
            <summary>
            Defines a curve that can be sampled at any point.
            </summary>
            <typeparam name="T">The type of a point in the curve.</typeparam>
        </member>
        <member name="M:SharpGLTF.Animations.ICurveSampler`1.GetPoint(System.Single)">
            <summary>
            Samples the curve at the given offset.
            </summary>
            <param name="offset">The curve offset to sample.</param>
            <returns>The value of the curve at <paramref name="offset"/>.</returns>
        </member>
        <member name="T:SharpGLTF.Animations.IConvertibleCurve`1">
            <summary>
            Defines methods that convert the current curve to a Step, Linear or Spline curve.
            </summary>
            <typeparam name="T">The type of a point of the curve</typeparam>
        </member>
        <member name="P:SharpGLTF.Animations.IConvertibleCurve`1.MaxDegree">
            <summary>
            Gets a value indicating the maximum degree of the curve, current values are:
            0: STEP.
            1: LINEAR.
            3: CUBIC.
            </summary>
        </member>
        <member name="M:SharpGLTF.Animations.IConvertibleCurve`1.Clone">
            <summary>
            Creates a clone of this curve.
            </summary>
            <returns>A new curve.</returns>
        </member>
        <member name="M:SharpGLTF.Animations.IConvertibleCurve`1.ToStepCurve">
            <summary>
            Gets a STEP interpolated curve. Use only when <see cref="P:SharpGLTF.Animations.IConvertibleCurve`1.MaxDegree"/> is 0.
            </summary>
            <returns>A Time-Value dictionary</returns>
        </member>
        <member name="M:SharpGLTF.Animations.IConvertibleCurve`1.ToLinearCurve">
            <summary>
            Gets a LINEAR interpolated curve. Use only when <see cref="P:SharpGLTF.Animations.IConvertibleCurve`1.MaxDegree"/> is 1.
            </summary>
            <returns>A Time-Value dictionary</returns>
        </member>
        <member name="M:SharpGLTF.Animations.IConvertibleCurve`1.ToSplineCurve">
            <summary>
            Gets a CUBIC interpolated curve. Use only when <see cref="P:SharpGLTF.Animations.IConvertibleCurve`1.MaxDegree"/> is 3.
            </summary>
            <returns>A Time-Value dictionary</returns>
        </member>
        <member name="T:SharpGLTF.Collections.ChildrenList`2">
            <summary>
            An Specialisation of <see cref="T:System.Collections.Generic.List`1"/>, which interconnects the list items with the parent of the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TParent"></typeparam>
        </member>
        <member name="P:SharpGLTF.Collections.ChildrenList`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SharpGLTF.Collections.ChildrenList`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:SharpGLTF.Collections.ChildrenList`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Collections.ChildrenList`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SharpGLTF.Collections.IChildOfList`1">
            <summary>
            Implemented by children of <see cref="T:SharpGLTF.Collections.ChildrenList`2"/>
            </summary>
            <typeparam name="TParent">The type of the parent class containing the collection.</typeparam>
        </member>
        <member name="P:SharpGLTF.Collections.IChildOfList`1.LogicalParent">
            <summary>
            Gets the logical parent that owns the collection containing this object.
            </summary>
        </member>
        <member name="P:SharpGLTF.Collections.IChildOfList`1.LogicalIndex">
            <summary>
            Gets the logical index of this item within the parent's collection.
            </summary>
        </member>
        <member name="M:SharpGLTF.Collections.IChildOfList`1.SetLogicalParent(`0,System.Int32)">
            <summary>
            Assigns a parent and index to this object.
            </summary>
            <param name="parent">The new parent, or null</param>
            <param name="index">The new index, or -1</param>
            <remarks>
            For internal use of the collection.<br/>
            ALWAYS IMPLEMENT EXPLICITLY!
            </remarks>
        </member>
        <member name="T:SharpGLTF.Collections.ReadOnlyLinqDictionary`3">
            <summary>
            Wraps a standard dictionary, but performs a transform in the value
            </summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValueIn">The internal value type.</typeparam>
            <typeparam name="TValueOut">The exposed value type.</typeparam>
        </member>
        <member name="T:SharpGLTF.Collections.ReferenceComparer`1">
            <summary>
            this class is used to compare two T class references,
            bypassing any equality operator implemented by the T class.
            </summary>
            <typeparam name="T">Any ByRef type.</typeparam>
            <see href="https://stackoverflow.com/questions/4901320/is-there-any-kind-of-referencecomparer-in-net"/>
        </member>
        <member name="T:SharpGLTF.IO.JsonContent">
            <summary>
            Represents an inmutable json object stored in memory.
            </summary>
            <remarks>
            The data structure is stored in memory as a DOM, using standard objects and collections.<br/>
            Use <see cref="M:SharpGLTF.IO.JsonContent.Serialize(System.Object,System.Text.Json.JsonSerializerOptions)"/> and <see cref="M:SharpGLTF.IO.JsonContent.Deserialize``1(System.Text.Json.JsonSerializerOptions)"/> to convert to your types.<br/>
            Use <see cref="M:SharpGLTF.IO.JsonContent.Parse(System.Text.Json.JsonDocument)"/> and <see cref="M:SharpGLTF.IO.JsonContent.ToJson(System.Text.Json.JsonSerializerOptions)"/> to convert from/to raw json text.<br/>
            </remarks>
        </member>
        <member name="M:SharpGLTF.IO.JsonContent.AreEqualByContent(SharpGLTF.IO.JsonContent,SharpGLTF.IO.JsonContent,System.Single)">
            <summary>
            Compares two <see cref="T:SharpGLTF.IO.JsonContent"/> objects for equality.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <param name="precission">The precission threshold when comparing floating point values.</param>
            <returns>true if the objects are considered equal</returns>
            <remarks>
            - Comparing json structures is tricky because the values are typeless, so when we parse a json DOM
            into memory we don't know which should be the right type to use for comparison.
            - Also, System.Text.JSon is roundtrip safe when used in Net Core, but it is not when used in
            Net Framework, so depending on the framework we use, floating point roundtrips will behave differently.
            </remarks>
        </member>
        <member name="P:SharpGLTF.IO.JsonContent.Content">
            <summary>
            Gets the dynamic json structure.
            </summary>
            <remarks>
            The possible value types can be:<br/>
            - An <see cref="T:System.IConvertible"/> object.<br/>
            - A non empty <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> object.<br/>
            - A non empty <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> object.
            </remarks>
        </member>
        <member name="M:SharpGLTF.IO.JsonContent.Serialize(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the value of a specified type into a <see cref="T:SharpGLTF.IO.JsonContent"/> using <see cref="T:System.Text.Json.JsonSerializer"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <returns>A <see cref="T:SharpGLTF.IO.JsonContent"/> object.</returns>
        </member>
        <member name="M:SharpGLTF.IO.JsonContent.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a json text an converts it to a <see cref="T:SharpGLTF.IO.JsonContent"/>
            </summary>
            <param name="jsonContent">The json text content.</param>
            <param name="options">Parser options.</param>
            <returns>A <see cref="T:SharpGLTF.IO.JsonContent"/> object</returns>
        </member>
        <member name="M:SharpGLTF.IO._JsonStaticUtils.Serialize(System.Object)">
            <summary>
            Serializes data trees into trees of <see cref="T:System.IConvertible"/>, <see cref="T:SharpGLTF.IO._JsonArray"/> and <see cref="T:SharpGLTF.IO._JsonObject"/>.
            </summary>
            <param name="value">Any <see cref="T:System.IConvertible"/> array, list, or dictionary.</param>
            <returns>An <see cref="T:System.IConvertible"/>, <see cref="T:SharpGLTF.IO._JsonArray"/> or <see cref="T:SharpGLTF.IO._JsonObject"/>.</returns>
        </member>
        <member name="M:SharpGLTF.IO._JsonStaticUtils.GetStructureHashCode(System.Object)">
            <summary>
            Calculates the hash of a json DOM structure, without taking values into account
            </summary>
            <param name="x">the input json DOM structure</param>
            <returns>A hash code</returns>
            <remarks>
            Theory says that two objects that are considered equal must have the same hash.
            This means that we cannot use the hashes of the values because two equivalent
            values (int 5) and (float 5.0f)  might have different hashes.
            </remarks>
        </member>
        <member name="T:SharpGLTF.IO._JsonArray">
            <summary>
            Represents an inmutable Json Array.
            </summary>
        </member>
        <member name="T:SharpGLTF.IO._JsonObject">
            <summary>
            Represents an inmutable Json Object (a Dictionary).
            </summary>
            <remarks>
            Supported by converter <see href="https://github.com/dotnet/runtime/blob/76904319b41a1dd0823daaaaae6e56769ed19ed3/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Collection/IReadOnlyDictionaryOfTKeyTValueConverter.cs"/>
            </remarks>
        </member>
        <member name="T:SharpGLTF.IO.JsonSerializable">
            <summary>
            Represents the base class of a serializable glTF schema2 object.
            Inherited by <see cref="T:SharpGLTF.Schema2.ExtraProperties"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.IO.UnknownNode">
            <summary>
            Represents a node with an unknown type in a glTF Schema.
            </summary>
            <remarks>
            When parsing a glTF json, the json object types are usually known at runtime,
            So the types are instantiated as the json is being parsed. But it can happen
            that we can find a json object for which the type is not known at runtime.
            This usually happens with unknown extensions, which are stored using this
            object.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Memory.AttributeFormat">
            <summary>
            Defines the formatting in which a byte sequence can be encoded/decoded to attribute elements.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.ColorArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an array of <see cref="T:System.Numerics.Vector4"/> values.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.ColorArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ColorArray"/> struct.
            </summary>
            <param name="source">The array to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="dimensions">The number of elements per item. Currently only values 3 and 4 are supported.</param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
            <param name="defaultW">If <paramref name="dimensions"/> is 3, the W values are filled with this value</param>
        </member>
        <member name="M:SharpGLTF.Memory.ColorArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ColorArray"/> struct.
            </summary>
            <param name="source">The array to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Numerics.Vector4"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="dimensions">The number of elements per item. Currently only values 3 and 4 are supported.</param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
            <param name="defaultW">If <paramref name="dimensions"/> is 3, the W values are filled with this value</param>
        </member>
        <member name="T:SharpGLTF.Memory.FloatingAccessor">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an array of strided <see cref="T:System.Single"/> values.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.ScalarArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.ScalarArray.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ScalarArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.ScalarArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ScalarArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Single"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.Vector2Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.Vector2Array.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector2Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.Vector2Array.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector2Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">>The number of <see cref="T:System.Numerics.Vector2"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.Vector3Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.Vector3Array.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector3Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.Vector3Array.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector3Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Numerics.Vector3"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.Vector4Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.Vector4Array.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector4Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.Vector4Array.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector4Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Numerics.Vector3"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.QuaternionArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.Matrix2x2Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <remarks>
            <see cref="T:System.Numerics.Vector"/> namespace doesn't support a 2x2 matrix, so the array is<br/>
            decoded as a Matrix2x2 matrix internally, but exposed as a <see cref="T:System.Numerics.Matrix3x2"/>.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Memory.Matrix3x2Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.Matrix3x3Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <remarks>
            <see cref="T:System.Numerics.Vector"/> namespace doesn't support a 3x3 matrix, so the array is<br/>
            decoded as a Matrix3x3 matrix internally, but exposed as a <see cref="T:System.Numerics.Matrix4x4"/>.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Memory.Matrix4x3Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <remarks>
            <see cref="T:System.Numerics.Vector"/> namespace doesn't support a 4x3 matrix, so the array is<br/>
            decoded as a Matrix4x3 matrix internally, but exposed as a <see cref="T:System.Numerics.Matrix4x4"/>.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Memory.Matrix4x4Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MultiArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an IList{Single[]}/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.IntegerArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.IntegerArray.#ctor(System.Memory{System.Byte},SharpGLTF.Schema2.IndexEncodingType)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.IntegerArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="encoding">Byte encoding.</param>
        </member>
        <member name="M:SharpGLTF.Memory.IntegerArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,SharpGLTF.Schema2.IndexEncodingType)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.IntegerArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.UInt32"/> items in <paramref name="source"/>.</param>
            <param name="encoding">Byte encoding.</param>
        </member>
        <member name="P:SharpGLTF.Memory.IntegerArray.Count">
            <summary>
            Gets the number of elements in the range delimited by the <see cref="T:SharpGLTF.Memory.IntegerArray"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryAccessInfo">
            <summary>
            Defines the memory encoding pattern for an arbitrary <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Name">
            <summary>
            If set, it can be used to identify the data with an attribute name: POSITION, NORMAL, etc
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.ByteOffset">
            <summary>
            number of bytes to advance to the beginning of the first item.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.ItemsCount">
            <summary>
            Total number of items
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.ByteStride">
            <summary>
            number of bytes to advance to the beginning of the next item
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Dimensions">
            <summary>
            number of sub-elements of each item.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Encoding">
            <summary>
            byte encoding of sub-elements of each item.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Normalized">
            <summary>
            normalization of sub-elements of each item.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryAccessInfo.StepByteLength">
            <summary>
            number of bytes to advance to the next item.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryAccessInfo.IsValidIndexer">
            <summary>
            returns true if this type can be used as a joint index.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryAccessInfo.AttributeComparer">
            <summary>
            Comparer used to sort attribute names in a friendly order.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryAccessor">
            <summary>
            Wraps a <see cref="T:System.ArraySegment`1"/> decoding it and exposing its content as arrays of different types.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryImage">
            <summary>
            Represents an image file stored as an in-memory byte array
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryImage.DEFAULT_PNG_IMAGE">
            <summary>
            Represents a 4x4 white PNG image.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.TryParseMime64(System.String,SharpGLTF.Memory.MemoryImage@)">
            <summary>
            Tries to parse a Mime64 string to <see cref="T:SharpGLTF.Memory.MemoryImage"/>
            </summary>
            <param name="mime64content">The Mime64 string source.</param>
            <param name="image">if decoding succeeds, it will contain the image file.</param>
            <returns>true if decoding succeeded.</returns>
            <remarks>
            The string must be haedered with a mime prefix like:     "data:image/png;base64,"
            </remarks>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryImage._SourcePathHint">
            <remarks>
            This field must NOT be used for equality checks, it has the same face value as a code comment.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.Content">
            <summary>
            Gets the file bytes of the image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.SourcePath">
            <summary>
            Gets the source path of this image, or <b>null</b>.
            <para><b>⚠️ DO NOT USE AS AN OBJECT ID ⚠️</b> see remarks.</para>
            </summary>
            <remarks>
            Not all images are expected to have a source path.<br/>
            Specifically images embedded in a GLB file or encoded with BASE64
            will not have any source path at all.<br/>
            So if your code depends on images having a path, it might crash
            on gltf files with embedded images.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsPng">
            <summary>
            Gets a value indicating whether this object represents a valid PNG image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsJpg">
            <summary>
            Gets a value indicating whether this object represents a valid JPG image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsDds">
            <summary>
            Gets a value indicating whether this object represents a valid DDS image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsWebp">
            <summary>
            Gets a value indicating whether this object represents a valid WEBP image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsKtx2">
            <summary>
            Gets a value indicating whether this object represents a valid KTX2 image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsExtendedFormat">
            <summary>
            Gets a value indicating whether this object represents an image backed by a glTF extension.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsValid">
            <summary>
            Gets a value indicating whether this object represents a valid image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.FileExtension">
            <summary>
            Gets the most appropriate extension string for this image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.MimeType">
            <summary>
            Gets the most appropriate Mime type string for this image.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.Open">
            <summary>
            Opens the image file for reading its contents
            </summary>
            <returns>A read only <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.SaveToFile(System.String)">
            <summary>
            Saves the image stored in this <see cref="T:SharpGLTF.Memory.MemoryImage"/> to a file.
            </summary>
            <param name="filePath">A destination file path, with an extension matching <see cref="P:SharpGLTF.Memory.MemoryImage.FileExtension"/></param>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage._GetBuffer">
            <summary>
            Gets the internal buffer.
            </summary>
            <returns>An array buffer.</returns>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.ToMime64(System.Boolean)">
            <summary>
            Returns this image file, enconded as a Mime64 string.
            </summary>
            <param name="withPrefix">true to prefix the string with a header.</param>
            <returns>A mime64 string.</returns>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.IsImageOfType(System.String)">
            <summary>
            identifies an image of a specific type.
            </summary>
            <param name="format">A string representing the format: png, jpg, dds...</param>
            <returns>True if this image is of the given type.</returns>
        </member>
        <member name="T:SharpGLTF.Memory.SparseArray`1">
            <summary>
            Special accessor to wrap over a base accessor and a sparse accessor
            </summary>
            <typeparam name="T">An unmanage structure type.</typeparam>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiRootArticulations">
            <summary>
            glTF Extension that defines metadata for applying external analysis or effects to a model.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiNodeArticulations">
            <summary>
            glTF Extension for an individual node in a glTF model, to associate it with the model's root AGI_articulations object.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiArticulation">
            <summary>
            A model articulation definition.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiArticulationStage">
            <summary>
            One stage of a model articulation definition.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiRootStkMetadata">
            <summary>
            glTF Extension that defines metadata for use with STK (Systems Tool Kit).
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiNodeStkMetadata">
            <summary>
            glTF Extension for an individual node in a glTF model, to associate it with the model's root AGI_stk_metadata object.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiStkSolarPanelGroup">
            <summary>
            A solar panel group definition.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AgiArticulationTransformType">
            <summary>
            The type of motion applied by this articulation stage.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.CesiumPrimitiveOutline">
            <summary>
            glTF extension for indicating that some edges of a primitive's triangles should be outlined.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.CesiumPrimitiveOutline._ValidateCesiumOutlineIndices(SharpGLTF.Schema2.Accessor,SharpGLTF.Schema2.MeshPrimitive)">
            <summary>
            Checks if all the indices of the Cesium outline accessor are within the range of in the MeshPrimitive indices
            </summary>
            <param name="accessor">Cesium outline accessor</param>
            <param name="meshPrimitive">MeshPrimitive with the CESIUM_primitive_outline extension</param>
            <returns>true all indices are available, false indices are missing </returns>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialClearCoat">
            <summary>
            glTF extension that defines the clearcoat material layer.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialIOR">
            <summary>
            glTF extension that defines the index of refraction of a material.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialIridescence">
            <summary>
            glTF extension that defines an iridescence effect.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialEmissiveStrength">
            <summary>
            glTF extension that adjusts the strength of emissive material properties.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialVolume">
            <summary>
            glTF extension that defines the parameters for the volume of a material.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MeshGpuInstancing">
            <summary>
            glTF extension defines instance attributes for a node with a mesh.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MeshGpuInstancing.Count">
            <summary>
            Gets a value indicating the number of instances to draw.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.PunctualLight">
            <summary>
            A directional, point, or spot light.
            </summary>
            <remarks>
            This is part of <see href="https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual"/> extension.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.PunctualLight.SetSpotCone(System.Single,System.Single)">
            <summary>
            Sets the cone angles for the <see cref="F:SharpGLTF.Schema2.PunctualLightType.Spot"/> light.
            </summary>
            <param name="innerConeAngle">
            Gets the Angle, in radians, from centre of spotlight where falloff begins.
            Must be greater than or equal to 0 and less than outerConeAngle.
            </param>
            <param name="outerConeAngle">
            Gets Angle, in radians, from centre of spotlight where falloff ends.
            Must be greater than innerConeAngle and less than or equal to PI / 2.0.
            </param>
        </member>
        <member name="M:SharpGLTF.Schema2.PunctualLight.SetColor(System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            Defines the light color, intensity and range for the current <see cref="T:SharpGLTF.Schema2.PunctualLight"/>.
            </summary>
            <param name="color">RGB value for light's color in linear space.</param>
            <param name="intensity">
            Brightness of light in. The units that this is defined in depend on the type of light.
            point and spot lights use luminous intensity in candela (lm/sr) while directional
            lights use illuminance in lux (lm/m2)
            </param>
            <param name="range">
            Hint defining a distance cutoff at which the light's intensity may be considered
            to have reached zero. Supported only for point and spot lights. Must be > 0.
            When undefined, range is assumed to be infinite.
            </param>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.LocalDirection">
            <summary>
            Gets the Local light direction.
            </summary>
            <remarks>
            For light types that have a direction (directional and spot lights),
            the light's direction is defined as the 3-vector (0.0, 0.0, -1.0)
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.LightType">
            <summary>
            Gets the type of light.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.InnerConeAngle">
            <summary>
            Gets the Angle, in radians, from centre of spotlight where falloff begins.
            Must be greater than or equal to 0 and less than outerConeAngle.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.OuterConeAngle">
            <summary>
            Gets Angle, in radians, from centre of spotlight where falloff ends.
            Must be greater than innerConeAngle and less than or equal to PI / 2.0.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.Color">
            <summary>
            Gets or sets the RGB value for light's color in linear space.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.Intensity">
            <summary>
            Gets or sets the Brightness of light in. The units that this is defined in depend on the type of light.
            point and spot lights use luminous intensity in candela (lm/sr) while directional
            lights use illuminance in lux (lm/m2)
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.Range">
            <summary>
            Gets or sets a Hint defining a distance cutoff at which the light's intensity may be considered
            to have reached zero. Supported only for point and spot lights.
            When undefined, range is assumed to be infinite.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureDDS">
            <summary>
            glTF extension to specify textures using the DirectDraw Surface file format (DDS).
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialSpecular">
            <summary>
            glTF extension that defines the strength of the specular reflection.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialPBRSpecularGlossiness">
            <summary>
            glTF extension that defines the specular-glossiness material model from Physically-Based Rendering (PBR) methodology.
            </summary>
            <summary>
            <see cref="T:SharpGLTF.Schema2.MaterialPBRSpecularGlossiness"/> has been deprecated by khronos in favour of <see cref="T:SharpGLTF.Schema2.MaterialPBRMetallicRoughness"/> + <see cref="T:SharpGLTF.Schema2.MaterialSpecular"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialSheen">
            <summary>
            glTF extension that defines the sheen material model.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureKTX2">
            <summary>
            glTF extension to specify textures using the KTX v2 images with Basis Universal supercompression.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureTransform">
            <summary>
            glTF extension that enables shifting and scaling UV coordinates on a per-texture basis
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.TextureTransform.TextureCoordinateOverride">
            <summary>
            Gets or sets a value that overrides <see cref="P:SharpGLTF.Schema2.TextureInfo.TextureCoordinate"/> if supplied, and if this extension is supported.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureWEBP">
            <summary>
            glTF extension to specify textures using the WebP image format.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialTransmission">
            <summary>
            glTF extension that defines the optical transmission of a material.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialUnlit">
            <summary>
            glTF extension that defines the unlit material model.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.IndexEncodingType">
            <summary>
            The indices data type.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.EncodingType">
            <summary>
            The datatype of the accessor's components.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.DimensionType">
            <summary>
            Specifies if the accessor's elements are scalars, vectors, or matrices.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.PropertyPath">
            <summary>
            The name of the node's TRS property to animate, or the <see cref="F:SharpGLTF.Schema2.PropertyPath.weights"/> of the Morph Targets it instantiates. For the <see cref="F:SharpGLTF.Schema2.PropertyPath.translation"/> property, the values that are provided by the sampler are the translation along the X, Y, and Z axes. For the <see cref="F:SharpGLTF.Schema2.PropertyPath.rotation"/> property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the <see cref="F:SharpGLTF.Schema2.PropertyPath.scale"/> property, the values are the scaling factors along the X, Y, and Z axes.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationInterpolationMode">
            <summary>
            Interpolation algorithm.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.BufferMode">
            <summary>
            The hint representing the intended GPU buffer type to use with this buffer view.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.CameraType">
            <summary>
            Specifies if the camera uses a perspective or orthographic projection.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AlphaMode">
            <summary>
            The alpha rendering mode of the material.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.PrimitiveType">
            <summary>
            The topology type of primitives to render.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureInterpolationFilter">
            <summary>
            Magnification filter.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureMipMapFilter">
            <summary>
            Minification filter.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureWrapMode">
            <summary>
            T (V) wrapping mode.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.LogicalChildOfRoot">
            <summary>
            All gltf elements stored in ModelRoot must inherit from this class.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.LogicalChildOfRoot.Name">
            <summary>
            Gets or sets the display text name, or null.
            <para><b>⚠️ DO NOT USE AS AN OBJECT ID ⚠️</b> see remarks.</para>
            </summary>
            <remarks>
            glTF does not define any rule for object names.<br/>
            This means that names can be null or non unique.<br/>
            So don't use <see cref="P:SharpGLTF.Schema2.LogicalChildOfRoot.Name"/> for anything other than object name display.<br/>
            If you need to reference objects by some ID, use lookup tables instead.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.LogicalChildOfRoot.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance that owns this object.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.LogicalChildOfRoot.LogicalIndex">
            <summary>
            Gets the zero-based index of this object in the Logical resources of <see cref="T:SharpGLTF.Schema2.ModelRoot"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.LogicalChildOfRoot.RenameLogicalElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Renames all the unnamed and duplicate name items in the collection so all the items have a unique valid name.
            </summary>
            <typeparam name="T">Any <see cref="T:SharpGLTF.Schema2.LogicalChildOfRoot"/> derived type.</typeparam>
            <param name="collection">The source collection.</param>
            <param name="namePrefix">The name prefix to use.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.AccessorSparseIndices">
            <summary>
            An object pointing to a buffer view containing the indices of deviating accessor values. The number of indices is equal to `accessor.sparse.count`. Indices **MUST** strictly increase.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AccessorSparseValues">
            <summary>
            An object pointing to a buffer view containing the deviating accessor values. The number of elements is equal to `accessor.sparse.count` times number of components. The elements have the same component type as the base accessor. The elements are tightly packed. Data **MUST** be aligned following the same rules as the base accessor.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AccessorSparse">
            <summary>
            Sparse storage of accessor values that deviate from their initialization value.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Accessor">
            <summary>
            A typed view into a buffer view that contains raw binary data.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.Accessor._CachedType">
            <summary>
            This must be null, or always in sync with <see cref="F:SharpGLTF.Schema2.Accessor._type"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.SourceBufferView">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.BufferView"/> buffer that contains the items as an encoded byte array.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.ByteOffset">
            <summary>
            Gets the starting byte offset within <see cref="P:SharpGLTF.Schema2.Accessor.SourceBufferView"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.ByteLength">
            <summary>
            Gets the number of bytes, starting at <see cref="P:SharpGLTF.Schema2.Accessor.ByteOffset"/> use by this <see cref="T:SharpGLTF.Schema2.Accessor"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Dimensions">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.DimensionType"/> of an item.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Encoding">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.EncodingType"/> of an item.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Normalized">
            <summary>
            Gets a value indicating whether the items values are normalized.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.IsSparse">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.Accessor"/> has a sparse structure.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Accessor.SetData(SharpGLTF.Schema2.BufferView,System.Int32,System.Int32,SharpGLTF.Schema2.DimensionType,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Associates this <see cref="T:SharpGLTF.Schema2.Accessor"/> with a <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
            <param name="buffer">The <see cref="T:SharpGLTF.Schema2.BufferView"/> source.</param>
            <param name="bufferByteOffset">The start byte offset within <paramref name="buffer"/>.</param>
            <param name="itemCount">The number of items in the accessor.</param>
            <param name="dimensions">The <see cref="T:SharpGLTF.Schema2.DimensionType"/> item type.</param>
            <param name="encoding">The <see cref="T:SharpGLTF.Schema2.EncodingType"/> item encoding.</param>
            <param name="normalized">The item normalization mode.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Accessor.SetIndexData(SharpGLTF.Schema2.BufferView,System.Int32,System.Int32,SharpGLTF.Schema2.IndexEncodingType)">
            <summary>
            Associates this <see cref="T:SharpGLTF.Schema2.Accessor"/> with a <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
            <param name="buffer">The <see cref="T:SharpGLTF.Schema2.BufferView"/> source.</param>
            <param name="bufferByteOffset">The start byte offset within <paramref name="buffer"/>.</param>
            <param name="itemCount">The number of items in the accessor.</param>
            <param name="encoding">The <see cref="T:SharpGLTF.Schema2.IndexEncodingType"/> item encoding.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Accessor.SetVertexData(SharpGLTF.Schema2.BufferView,System.Int32,System.Int32,SharpGLTF.Schema2.DimensionType,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Associates this <see cref="T:SharpGLTF.Schema2.Accessor"/> with a <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
            <param name="buffer">The <see cref="T:SharpGLTF.Schema2.BufferView"/> source.</param>
            <param name="bufferByteOffset">The start byte offset within <paramref name="buffer"/>.</param>
            <param name="itemCount">The number of items in the accessor.</param>
            <param name="dimensions">The <see cref="T:SharpGLTF.Schema2.DimensionType"/> item type.</param>
            <param name="encoding">The <see cref="T:SharpGLTF.Schema2.EncodingType"/> item encoding.</param>
            <param name="normalized">The item normalization mode.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationChannelTarget">
            <summary>
            The descriptor of the animated property.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationChannel">
            <summary>
            An animation channel combines an animation sampler with a target property being animated.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationChannel.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Animation"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalAnimations"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationChannel.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.Animation"/> instance that owns this object.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationChannel.TargetNode">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.Node"/> which property is to be bound with this animation.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationChannel.TargetNodePath">
            <summary>
            Gets which property of the <see cref="T:SharpGLTF.Schema2.Node"/> pointed by <see cref="P:SharpGLTF.Schema2.AnimationChannel.TargetNode"/> is to be bound with this animation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationSampler">
            <summary>
            An animation sampler combines timestamps with a sequence of output values and defines an interpolation algorithm.
            </summary>
            <remarks>
            This class can be casted to these interfaces:
            <list type="table">
            <item><see cref="T:SharpGLTF.Schema2.IAnimationSampler`1"/> with T: <see cref="T:System.Numerics.Vector3"/> for Scale and Translation keys.</item>
            <item><see cref="T:SharpGLTF.Schema2.IAnimationSampler`1"/> with T: <see cref="T:System.Numerics.Quaternion"/> for Rotation keys.</item>
            <item><see cref="T:SharpGLTF.Schema2.IAnimationSampler`1"/> with T: <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> for Morph targets (limited to 8 weights).</item>
            <item><see cref="T:SharpGLTF.Schema2.IAnimationSampler`1"/> with T: <see cref="T:System.Single"/>[] for Morph targets (unlimited weights).</item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationSampler.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.Animation"/> instance that owns this <see cref="T:SharpGLTF.Schema2.AnimationSampler"/> instance.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationSampler.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.AnimationSampler"/> at <see cref="F:SharpGLTF.Schema2.Animation._samplers"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationSampler.InterpolationMode">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Numerics#Vector3}#GetLinearKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Numerics#Quaternion}#GetLinearKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{SharpGLTF#Transforms#SparseWeight8}#GetLinearKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#ArraySegment{System#Single}}#GetLinearKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Single[]}#GetLinearKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Numerics#Vector3}#GetCubicKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Numerics#Quaternion}#GetCubicKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Single[]}#GetCubicKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{SharpGLTF#Transforms#SparseWeight8}#GetCubicKeys">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Numerics#Vector3}#CreateCurveSampler(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Numerics#Quaternion}#CreateCurveSampler(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{SharpGLTF#Transforms#SparseWeight8}#CreateCurveSampler(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#Single[]}#CreateCurveSampler(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.SharpGLTF#Schema2#IAnimationSampler{System#ArraySegment{System#Single}}#CreateCurveSampler(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.OnValidateReferences(SharpGLTF.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Schema2.AnimationSampler.OnValidateContent(SharpGLTF.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:SharpGLTF.Schema2.Animation">
            <summary>
            A keyframe animation.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Animation._UseChannel(SharpGLTF.Schema2.Node,SharpGLTF.Schema2.PropertyPath)">
            <remarks>
            There can only be one <see cref="T:SharpGLTF.Schema2.AnimationChannel"/> for every node and path
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2.Asset">
            <summary>
            Metadata about the glTF asset.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Buffer">
            <summary>
            A buffer points to binary geometry, animation, or skins.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.Buffer._Content">
            <summary>
            Immediately after deserialization, binary buffer is loaded/parsed and stored here
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Buffer._WriteToSatellite(SharpGLTF.Schema2.WriteContext,System.String)">
            <summary>
            Called internally by the serializer when the buffer content is to be written as an external file
            </summary>
            <param name="writer">The satellite asset writer</param>
            <param name="satelliteUri">A local satellite URI</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Buffer._WriteToInternal">
            <summary>
            Called internally by the serializer when the buffer content is to be written internally.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Buffer._ClearAfterWrite">
            <summary>
            Called by the serializer immediatelly after
            calling <see cref="M:SharpGLTF.Schema2.Buffer._WriteToSatellite(SharpGLTF.Schema2.WriteContext,System.String)"/>
            or <see cref="M:SharpGLTF.Schema2.Buffer._WriteToInternal"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.BufferView">
            <summary>
            A view into a buffer generally representing a subset of the buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.IsVertexBuffer">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.BufferView"/> defines a GPU Ready Vertex Buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.IsIndexBuffer">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.BufferView"/> defines a GPU Ready Index Buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.IsDataBuffer">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.BufferView"/> defines a general purpose data buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.ByteStride">
            <summary>
            Gets the number of bytes between the beginnings of successive elements, or Zero.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.Content">
            <summary>
            Gets the actual bytes defined by this <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.BufferView.FindAccessors">
            <summary>
            Finds all the accessors using this BufferView
            </summary>
            <returns>A collection of accessors</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.BufferView.IsInterleaved(System.Collections.Generic.IEnumerable{SharpGLTF.Schema2.Accessor})">
            <summary>
            Checks if <paramref name="accessors"/> use this buffer in interleaved arrangement
            </summary>
            <param name="accessors">A collection of accessors that use this buffer</param>
            <returns>true if the buffer is interleaved</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.BufferView.GetAccessorByteLength(SharpGLTF.Memory.AttributeFormat@,System.Int32)">
            <summary>
            Calculates the number of bytes to which this accessors reads
            taking into account if the source <see cref="T:SharpGLTF.Schema2.BufferView"/> is strided.
            </summary>
            <returns>The number of bytes to access.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.CameraOrthographic">
            <summary>
            An orthographic camera containing properties to create an orthographic projection matrix.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.XMag">
            <summary>
            Gets the magnification factor in the X axis
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.YMag">
            <summary>
            Gets the magnification factor in the Y axis
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.ZNear">
            <summary>
            Gets the near plane distance in the Z axis.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.ZFar">
            <summary>
            Gets the far plane distance in the Z axis.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.Matrix">
            <summary>
            Gets the projection matrix for the current settings
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.CameraPerspective">
            <summary>
            A perspective camera containing properties to create a perspective projection matrix.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.AspectRatio">
            <summary>
            Gets the aspect ratio between horizontal window size and vertical window size.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.VerticalFOV">
            <summary>
            Gets the vertical field of view, in radians
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.ZNear">
            <summary>
            Gets the near plane distance in the Z axis.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.ZFar">
            <summary>
            Gets the far plane distance in the Z axis.
            </summary>
            <remarks>
            This value can be a finite value, or positive infinity.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.Matrix">
            <summary>
            Gets the projection matrix for the current settings
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Camera">
            <summary>
            A camera's projection.
            A node **MAY** reference a camera to apply a transform to place the camera in the scene.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Camera.Matrix">
            <summary>
            Gets the projection matrix for the current <see cref="P:SharpGLTF.Schema2.Camera.Settings"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Camera.SetOrthographicMode(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Configures this <see cref="T:SharpGLTF.Schema2.Camera"/> to use Orthographic projection.
            </summary>
            <param name="xmag">Magnification in the X axis.</param>
            <param name="ymag">Magnification in the Y axis.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Camera.SetPerspectiveMode(System.Nullable{System.Single},System.Single,System.Single,System.Single)">
            <summary>
            Configures this <see cref="T:SharpGLTF.Schema2.Camera"/> to use perspective projection.
            </summary>
            <param name="aspectRatio">The aspect ratio between horizontal and vertical. (optional)</param>
            <param name="yfov">The vertical field of view, in radians.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureInfo">
            <summary>
            Reference to a texture.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.TextureInfo.TextureCoordinate">
            <summary>
            Gets or sets the index of texture's TEXCOORD_[index] attribute used for texture coordinate mapping.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialPBRMetallicRoughness">
            <summary>
            A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Material">
            <summary>
            The material appearance of a primitive.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.Alpha">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.AlphaMode"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.AlphaCutoff">
            <summary>
            Gets or sets the <see cref="P:SharpGLTF.Schema2.Material.AlphaCutoff"/> value.<br/>
            It needs to be used in combination with <see cref="P:SharpGLTF.Schema2.Material.Alpha"/> = <see cref="F:SharpGLTF.Schema2.AlphaMode.MASK"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.DoubleSided">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SharpGLTF.Schema2.Material"/> will render as Double Sided.<br/>
            Default value: False
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.Unlit">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.Material"/> instance has Unlit extension.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.Channels">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.MaterialChannel"/> elements available in this <see cref="T:SharpGLTF.Schema2.Material"/> instance.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.IndexOfRefraction">
            <summary>
            Gets or sets the index of refraction.
            </summary>
            <remarks>
            <para>
            The index of refraction (IOR) is a measured physical number usually in the range between 1 and 2
            that determines how much the path of light is bent, or refracted, when entering a material.
            It also influences the ratio between reflected and transmitted light, calculated from the Fresnel equations.
            </para>
            <para>
            This property backs KHR_Materials_IOR extension.
            </para>
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.FindChannel(System.String)">
            <summary>
            Finds an instance of <see cref="T:SharpGLTF.Schema2.MaterialChannel"/>
            </summary>
            <param name="channelKey">
            The channel key. Currently, these values are used:
            - "Normal"
            - "Occlusion"
            - "Emissive"
            - When material is <see cref="T:SharpGLTF.Schema2.MaterialPBRMetallicRoughness"/>:
              - "BaseColor"
              - "MetallicRoughness"
            - When material is <see cref="T:SharpGLTF.Schema2.MaterialPBRSpecularGlossiness"/>:
              - "Diffuse"
              - "SpecularGlossiness"
            </param>
            <returns>A <see cref="T:SharpGLTF.Schema2.MaterialChannel"/> structure. or null if it does not exist</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.InitializeUnlit">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Material"/> instance with Unlit attributes.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.InitializePBRMetallicRoughness(System.String[])">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Material"/> instance with PBR Metallic Roughness attributes.
            </summary>
            <param name="extensionNames">
            Extension names.
            Current valid names are: "ClearCoat", "Transmission", "Sheen"
            </param>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.InitializePBRSpecularGlossiness(System.Boolean)">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Material"/> instance with PBR Specular Glossiness attributes.
            </summary>
            <param name="useFallback">true to add a PBRMetallicRoughness fallback material.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.MeshPrimitive">
            <summary>
            Geometry to be rendered with the given material.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.SetCesiumOutline(System.Collections.Generic.IReadOnlyList{System.UInt32},System.String)">
            <summary>
            Sets Cesium outline vertex indices
            </summary>
            <param name="outlines">the list of vertex indices.</param>
            <param name="accessorName">the name of the accessor to be created.</param>
        </member>
        <member name="P:SharpGLTF.Schema2.MeshPrimitive.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> at <see cref="P:SharpGLTF.Schema2.Mesh.Primitives"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MeshPrimitive.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.Mesh"/> instance that owns this <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> instance.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MeshPrimitive.Material">
            <summary>
            Gets or sets the <see cref="P:SharpGLTF.Schema2.MeshPrimitive.Material"/> instance, or null.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetIndices">
            <summary>
            Gets the raw list of indices of this primitive.
            </summary>
            <returns>A list of indices, or null.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetPointIndices">
            <summary>
            Decodes the raw indices and returns a list of indexed points.
            </summary>
            <returns>A sequence of indexed points.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetLineIndices">
            <summary>
            Decodes the raw indices and returns a list of indexed lines.
            </summary>
            <returns>A sequence of indexed lines.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetTriangleIndices">
            <summary>
            Decodes the raw indices and returns a list of indexed triangles.
            </summary>
            <returns>A sequence of indexed triangles.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Mesh">
            <summary>
            A set of primitives to be rendered.
            Its global transform is defined by a node that references it.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Mesh.CreatePrimitive">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> instance
            and adds it to the current <see cref="T:SharpGLTF.Schema2.Mesh"/>.
            </summary>
            <returns>A <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> instance.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Node">
            <summary>
            A node in the node hierarchy.
            When the node contains `skin`, all `mesh.primitives` **MUST** contain `JOINTS_0` and `WEIGHTS_0` attributes.
            A node **MAY** have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), `matrix` **MUST NOT** be present.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualParent">
            <summary>
            Gets the visual parent <see cref="T:SharpGLTF.Schema2.Node"/> instance that contains this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualRoot">
            <summary>
            Gets the visual root <see cref="T:SharpGLTF.Schema2.Node"/> instance that contains this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualScenes">
            <summary>
            Gets the collection of <see cref="T:SharpGLTF.Schema2.Scene"/> instances that reference this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualChildren">
            <summary>
            Gets the visual children <see cref="T:SharpGLTF.Schema2.Node"/> instances contained in this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.IsSkinJoint">
            <summary>
            Gets a value indicating whether this node is used as a Bone joint in a <see cref="P:SharpGLTF.Schema2.Node.Skin"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.IsSkinSkeleton">
            <summary>
            Gets a value indicating whether this node is used as a Skeleton node in a <see cref="P:SharpGLTF.Schema2.Node.Skin"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.Camera">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.Camera"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.Mesh">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.Mesh"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.Skin">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.Skin"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.MorphWeights">
            <summary>
            Gets the Morph Weights of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.WorldMatrix">
            <summary>
            Gets or sets the world <see cref="T:System.Numerics.Matrix4x4"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.LocalTransform">
            <summary>
            Gets or sets the local Scale, Rotation and Translation of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.LocalMatrix">
            <summary>
            Gets or sets the local transform <see cref="T:System.Numerics.Matrix4x4"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.LocalMatrixPrecise">
            <summary>
            Gets the local <see cref="T:SharpGLTF.Transforms.Matrix4x4Double"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
            <remarks>
            <para>
            This method is equivalent to <see cref="P:SharpGLTF.Schema2.Node.WorldMatrix"/>, but since the world matrix<br/>
            is calculated by concatenating all the local matrices in the hierarchy, there's chances<br/>
            to have some precission loss on large transform chains.
            </para>
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.WorldMatrixPrecise">
            <summary>
            Gets the world <see cref="T:SharpGLTF.Transforms.Matrix4x4Double"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
            <remarks>
            <para>
            This method is equivalent to <see cref="P:SharpGLTF.Schema2.Node.WorldMatrix"/>, but since the world matrix<br/>
            is calculated by concatenating all the local matrices in the hierarchy, there's chances<br/>
            to have some precission loss on large transform chains.
            </para>
            <para>
            Precission is specially relevant when calculating the Inverse Bind Matrix.
            </para>
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.IsTransformAnimated">
            <summary>
            Gets a value indicating whether this transform is affected by any animation.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.GetLocalTransform(SharpGLTF.Schema2.Animation,System.Single)">
            <summary>
            Gets the local transform of this node in a given animation at a given time.
            </summary>
            <param name="animation">the animation to sample.</param>
            <param name="time">the time offset within the animation.</param>
            <returns>the sampled transform.</returns>
            <remarks>
            This is a convenience method, but it's slow, it's better to cache <see cref="M:SharpGLTF.Schema2.Node.GetCurveSamplers(SharpGLTF.Schema2.Animation)"/>.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.GetWorldMatrix(SharpGLTF.Schema2.Animation,System.Single)">
            <summary>
            Gets the world matrix of this node in a given animation at a given time.
            </summary>
            <param name="animation">the animation to sample.</param>
            <param name="time">the time offset within the animation.</param>
            <returns>the sampled transform.</returns>
            <remarks>
            This is a convenience method, but it's slow, it's better to cache <see cref="M:SharpGLTF.Schema2.Node.GetCurveSamplers(SharpGLTF.Schema2.Animation)"/>.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.CreateNode(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Node"/> instance,
            adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalNodes"/>
            and references it as a child in the current graph.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Node"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.Flatten(SharpGLTF.Schema2.IVisualNodeContainer)">
            <summary>
            Returns all the <see cref="T:SharpGLTF.Schema2.Node"/> instances of a visual hierarchy as a flattened list.
            </summary>
            <param name="container">A <see cref="T:SharpGLTF.Schema2.IVisualNodeContainer"/> instance.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.FindNodesUsingMesh(SharpGLTF.Schema2.Mesh)">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances using <paramref name="mesh"/>.
            </summary>
            <param name="mesh">A <see cref="P:SharpGLTF.Schema2.Node.Mesh"/> instance.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.FindNodesUsingSkin(SharpGLTF.Schema2.Skin)">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances using <paramref name="skin"/>.
            </summary>
            <param name="skin">A <see cref="P:SharpGLTF.Schema2.Node.Skin"/> instance.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances.</returns>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.PunctualLight">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.PunctualLight"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
            <remarks>
            This is part of <see href="https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual"/> extension.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureSampler">
            <summary>
            Texture sampler properties for filtering and wrapping modes.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.TextureSampler.MinFilter">
            <summary>
            Gets the texture minification filter.
            </summary>
            <remarks>
            If value is Default, it must be interpreted by the runtime as "best fit"
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.TextureSampler.MagFilter">
            <summary>
            Gets the texture magnification filter.
            </summary>
            <remarks>
            If value is Default, it must be interpreted by the runtime as "best fit"
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2.Scene">
            <summary>
            The root nodes of a scene.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Scene.CreateNode(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Node"/> instance,
            adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalNodes"/>
            and references it as a child in the current graph.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Node"/> instance.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Skin">
            <summary>
            Joints and matrices defining a skin.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Skin.VisualParents">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances using this <see cref="T:SharpGLTF.Schema2.Skin"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Skin.JointsCount">
            <summary>
            Gets the number of joints
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Skin.Skeleton">
            <summary>
            Gets or sets the Skeleton <see cref="T:SharpGLTF.Schema2.Node"/>, which represents the root of a joints hierarchy.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.BindJoints(System.Numerics.Matrix4x4,SharpGLTF.Schema2.Node[])">
            <summary>
            Binds a bone armature of <see cref="T:SharpGLTF.Schema2.Node"/> to the associated skinned mesh.
            </summary>
            <param name="meshBindTransform">The world transform matrix of the mesh at the time of binding.</param>
            <param name="joints">A collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints.</param>
            <remarks>
            This method uses the <see cref="P:SharpGLTF.Schema2.Node.WorldMatrix"/> value of each joint to computer the inverse bind matrix.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.BindJoints(System.ValueTuple{SharpGLTF.Schema2.Node,System.Numerics.Matrix4x4}[])">
            <summary>
            Binds a bone armature of <see cref="T:SharpGLTF.Schema2.Node"/> to the associated skinned mesh.
            </summary>
            <param name="joints">
            A collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints,
            where each joint has an Inverse Bind Matrix.
            </param>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.IsMatch(SharpGLTF.Schema2.Node,System.Collections.Generic.KeyValuePair{SharpGLTF.Schema2.Node,System.Numerics.Matrix4x4}[])">
            <summary>
            Returns true if this <see cref="T:SharpGLTF.Schema2.Skin"/> matches the input values.
            </summary>
            <param name="skeleton">A <see cref="T:SharpGLTF.Schema2.Node"/> instance that represents the skeleton root.</param>
            <param name="joints">A key value pair collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints and their binding matrices.</param>
            <returns>True if the input values match this <see cref="T:SharpGLTF.Schema2.Skin"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.FindSkinsUsingJoint(SharpGLTF.Schema2.Node)">
            <summary>
            Finds all the skins that are using the given <see cref="T:SharpGLTF.Schema2.Node"/> as a joint.
            </summary>
            <param name="jointNode">A <see cref="T:SharpGLTF.Schema2.Node"/> joint.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Skin"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.FindSkinsUsingSkeleton(SharpGLTF.Schema2.Node)">
            <summary>
            Finds all the skins that are using the given <see cref="T:SharpGLTF.Schema2.Node"/> as a skeleton.
            </summary>
            <param name="skeletonNode">A <see cref="T:SharpGLTF.Schema2.Node"/> skeleton.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Skin"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin._FindCommonAncestor(System.Collections.Generic.IEnumerable{SharpGLTF.Schema2.Node})">
            <summary>
            Validates the node tree, ensuring that all nodes share a common ancestor node, and returns it.
            </summary>
            <param name="nodes">A collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints arranged in a tree.</param>
            <returns>The <see cref="T:SharpGLTF.Schema2.Node"/> root of the tree.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Texture">
            <summary>
            A texture and its sampler.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.ModelRoot">
            <summary>
            The root object for a glTF asset.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateAccessor(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Accessor"/> instance
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalAccessors"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Accessor"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateAnimation(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Animation"/> instance and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalAnimations"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Animation"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateBuffer(System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Buffer"/> instance
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/>.
            </summary>
            <param name="byteCount">the size of the buffer, in bytes.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Buffer"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBuffer(System.Byte[])">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Buffer"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/>.
            </summary>
            <param name="content">the byte array to be wrapped as a buffer</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Buffer"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.MergeBuffers">
            <summary>
            Merges all the <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/> instances into a single big one.
            </summary>
            <remarks>
            <para>
            When merging the buffers, it also adjusts the BufferView offsets so the data they point to remains the same.
            </para>
            <para>
            If images are required to be included in the binary, call <see cref="M:SharpGLTF.Schema2.ModelRoot.MergeImages"/>
            before calling <see cref="M:SharpGLTF.Schema2.ModelRoot.MergeBuffers"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            .Net arrays have an upper limit of 2Gb, so this is the biggest a buffer can normally grow,
            so attempting to merge buffers that sum more than 2Gb will throw this exception.
            </exception>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.MergeBuffers(System.Int32)">
            <summary>
            Merges all the <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/> instances into buffers of <paramref name="maxSize"/> size.
            </summary>
            <param name="maxSize">
            The maximum size of each buffer.
            Notice that if a single BufferView is larger than <paramref name="maxSize"/>, that buffer will be also larger.
            </param>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.IsolateMemory">
            <summary>
            Refreshes all internal memory buffers.
            </summary>
            <remarks>
            <see cref="T:SharpGLTF.Schema2.Buffer"/> instances can be created using external <see cref="T:System.Byte"/> arrays, which
            can potentially be shared with other instances. Editing these arrays directly can lead to data
            corruption.
            This method refreshes all internal memory buffers, by copying the data into newly allocated
            buffers. This ensures that at this point, all memory buffers are not shared and of exclusive
            use of this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBufferView(System.ArraySegment{System.Byte},System.Int32,System.Nullable{SharpGLTF.Schema2.BufferMode})">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.BufferView"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBufferViews"/>.
            </summary>
            <param name="data">The array range to wrap.</param>
            <param name="byteStride">For strided vertex buffers, it must be a value multiple of 4, 0 otherwise</param>
            <param name="target">The type hardware device buffer, or null</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.BufferView"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBufferView(System.Byte[],System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{SharpGLTF.Schema2.BufferMode})">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.BufferView"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBufferViews"/>.
            </summary>
            <param name="buffer">The array to wrap.</param>
            <param name="byteOffset">The zero-based index of the first Byte in <paramref name="buffer"/></param>
            <param name="byteLength">The number of elements in <paramref name="buffer"/></param>
            <param name="byteStride">For strided vertex buffers, it must be a value multiple of 4, 0 otherwise</param>
            <param name="target">The type hardware device buffer, or null</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.BufferView"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBufferView(SharpGLTF.Schema2.Buffer,System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{SharpGLTF.Schema2.BufferMode})">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.BufferView"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBufferViews"/>.
            </summary>
            <param name="buffer">The buffer to wrap.</param>
            <param name="byteOffset">The zero-based index of the first Byte in <paramref name="buffer"/></param>
            <param name="byteLength">The number of elements in <paramref name="buffer"/></param>
            <param name="byteStride">For strided vertex buffers, it must be a value multiple of 4, 0 otherwise</param>
            <param name="target">The type hardware device buffer, or null</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.BufferView"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateCamera(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Camera"/> instance.
            and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalCameras"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Camera"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateImage(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Image"/> instance.
            and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalImages"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Image"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseImage(SharpGLTF.Memory.MemoryImage)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Image"/> instance.
            </summary>
            <param name="imageContent">An image encoded in PNG, JPEG or DDS</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Image"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.MergeImages">
             <summary>
             Transfers all the <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalImages"/> content into <see cref="T:SharpGLTF.Schema2.BufferView"/> instances
             </summary>
             <remarks>
             Images can be stored in three different ways:
             - As satellite files.
             - Embedded as MIME64 into the JSON document
             - Referenced with <see cref="T:SharpGLTF.Schema2.BufferView"/>
            
             This call ensures all images will be internalized as <see cref="T:SharpGLTF.Schema2.BufferView"/> instances.
            
             This action cannot be reversed.
             </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateMaterial(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Material"/> instance and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMaterials"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Material"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateMesh(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Mesh"/> instance
            and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Mesh"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.ApplyBasisTransform(System.Numerics.Matrix4x4,System.String)">
            <summary>
            Applies a world transform to all the scenes of the model.
            </summary>
            <param name="basisTransform">The transform to apply.</param>
            <param name="basisNodeName">The name of the new root node, if it needs to be created.</param>
            <remarks>
            This method is appropiate to apply a general axis or scale change to the whole model.
            Animations are preserved by encapsulating animated nodes inside a master basis transform node.
            Meanwhile, unanimated nodes are transformed directly.
            If the determinant of <paramref name="basisTransform"/> is negative, the face culling should be
            flipped when rendering.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateModel">
            <summary>
            Creates a new <see cref = "T:SharpGLTF.Schema2.ModelRoot" /> instance.
            </summary>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.DeepClone">
            <summary>
            Creates a complete clone of this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.
            </summary>
            <returns>A new <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
            <remarks>
            Deep cloning is performed as a brute force operation; by serializing
            the whole model to GLTF into memory, and then deserializing it back to DOM.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.ModelRoot.LogicalPunctualLights">
            <summary>
            Gets A collection of <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instances.
            </summary>
            <remarks>
            This is part of <see href="https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual">KHR_lights_punctual</see> extension.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreatePunctualLight(SharpGLTF.Schema2.PunctualLightType)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance and
            adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalPunctualLights"/>.
            </summary>
            <param name="lightType">A value of <see cref="T:SharpGLTF.Schema2.PunctualLightType"/> describing the type of light to create.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreatePunctualLight(System.String,SharpGLTF.Schema2.PunctualLightType)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance.
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalPunctualLights"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="lightType">A value of <see cref="T:SharpGLTF.Schema2.PunctualLightType"/> describing the type of light to create.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseScene(System.Int32)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Scene"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalScenes"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SharpGLTF.Schema2.Scene"/> in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalScenes"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Scene"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseScene(System.String)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Scene"/> instance that has the
            same <paramref name="name"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalScenes"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Scene"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateSkin(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Skin"/> instance
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalSkins"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Skin"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseTextureSampler(SharpGLTF.Schema2.TextureWrapMode,SharpGLTF.Schema2.TextureWrapMode,SharpGLTF.Schema2.TextureMipMapFilter,SharpGLTF.Schema2.TextureInterpolationFilter)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.TextureSampler"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextureSamplers"/>.
            </summary>
            <param name="ws">The <see cref="T:SharpGLTF.Schema2.TextureWrapMode"/> in the S axis.</param>
            <param name="wt">The <see cref="T:SharpGLTF.Schema2.TextureWrapMode"/> in the T axis.</param>
            <param name="min">A value of <see cref="T:SharpGLTF.Schema2.TextureMipMapFilter"/>.</param>
            <param name="mag">A value of <see cref="T:SharpGLTF.Schema2.TextureInterpolationFilter"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.TextureSampler"/> instance, or null if all the arguments are default values.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseTexture(SharpGLTF.Schema2.Image,SharpGLTF.Schema2.TextureSampler)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Texture"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextures"/>.
            </summary>
            <param name="primary">The source <see cref="T:SharpGLTF.Schema2.Image"/>.</param>
            <param name="sampler">The source <see cref="T:SharpGLTF.Schema2.TextureSampler"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Texture"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseTexture(SharpGLTF.Schema2.Image,SharpGLTF.Schema2.Image,SharpGLTF.Schema2.TextureSampler)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Texture"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextures"/>.
            </summary>
            <param name="primary">The source <see cref="T:SharpGLTF.Schema2.Image"/>.</param>
            <param name="fallback">The source <see cref="T:SharpGLTF.Schema2.Image"/>.</param>
            <param name="sampler">The source <see cref="T:SharpGLTF.Schema2.TextureSampler"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Texture"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.Load(System.String,SharpGLTF.Schema2.ReadSettings)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a path pointing to a GLB or a GLTF file
            </summary>
            <param name="filePath">A valid file path.</param>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
            <remarks>
            <paramref name="settings"/> can be either a plain <see cref="T:SharpGLTF.Schema2.ReadSettings"/> instance,
            or a <see cref="T:SharpGLTF.Schema2.ReadContext"/>, in which case, the context will be used to read the
            files from it.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.ParseGLB(System.ArraySegment{System.Byte},SharpGLTF.Schema2.ReadSettings)">
            <summary>
            Parses a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.Byte"/> array representing a GLB file
            </summary>
            <param name="glb">A <see cref="T:System.Byte"/> array representing a GLB file</param>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.ReadGLB(System.IO.Stream,SharpGLTF.Schema2.ReadSettings)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> representing a GLB file
            </summary>
            <param name="stream">The source <see cref="T:System.IO.Stream"/>.</param>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.GetSatellitePaths(System.String)">
            <summary>
            Gets the list of satellite / dependency files for a given glTF file.
            This includes binary blobs and texture images.
            </summary>
            <param name="filePath">A valid file path.</param>
            <returns>A list of relative file paths, as found in the file.</returns>
            <remarks>
            This method is designed to be as fast as possible, and it avoids performing much
            of the validation and parsing of a glTf file, it just blindly looks for URI fields.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.Save(System.String,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a file in GLTF or GLB based on the extension of <paramref name="filePath"/>.
            </summary>
            <param name="filePath">A valid file path to write to.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.SaveGLB(System.String,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a file in GLB format.
            </summary>
            <param name="filePath">A valid file path to write to.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.SaveGLTF(System.String,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a file in GLTF format.
            </summary>
            <param name="filePath">A valid file path to write to.</param>
            <param name="settings">Optional settings.</param>
            <remarks>
            Satellite files like buffers and images are also saved with the file name formatted as "FILE_{Index}.EXT".
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.GetJsonPreview">
            <summary>
            Gets the JSON document of this <see cref="T:SharpGLTF.Schema2.ModelRoot"/>.
            </summary>
            <returns>A JSON content.</returns>
            <remarks>
            ⚠ Beware: this method serializes the current model into a json, without taking care of the binary buffers,
            so the produced json might not be usable!
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot._GetJSON(System.Boolean)">
            <summary>
            Gets the JSON document of this <see cref="T:SharpGLTF.Schema2.ModelRoot"/>.
            </summary>
            <param name="indented">The formatting of the JSON document.</param>
            <returns>A JSON content.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.WriteGLB(SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a <see cref="T:System.Byte"/> array in GLB format.
            </summary>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:System.Byte"/> array containing a GLB file.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.WriteGLB(System.IO.Stream,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a <see cref="T:System.IO.Stream"/> in GLB format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> open for writing.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.Image">
            <summary>
            Image data used to create a texture. Image **MAY** be referenced by an URI (or IRI) or a buffer view index.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.Image._SatelliteContent">
            <summary>
            this is the not a raw bitmap, but tha actual compressed image in PNG or JPEG.
            </summary>
            <remarks>
            When a model is loaded, the image file is loaded into memory and assigned to this
            field, and the <see cref="F:SharpGLTF.Schema2.Image._uri"/> and <see cref="F:SharpGLTF.Schema2.Image._mimeType"/> fields are nullified.
            When writing a gltf file with external images, the <see cref="F:SharpGLTF.Schema2.Image._uri"/> and <see cref="F:SharpGLTF.Schema2.Image._mimeType"/>
            fields are briefly reassigned so the JSON can be serialized correctly.
            After serialization <see cref="F:SharpGLTF.Schema2.Image._uri"/> and <see cref="F:SharpGLTF.Schema2.Image._mimeType"/> fields are set back to null.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.Image.Content">
            <summary>
            Gets or sets the in-memory representation of the image file.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Image.AlternateWriteFileName">
            <summary>
            When set to a FileName or a relative File Path,
            it will be used as the file name of the texture being written.<br/>
            When null, a default file name will be used.
            </summary>
            <remarks>        
            <para>
            if not sure about the image extension, using .* as extension will replace
            the extension with the appropiate one at the time of writing.
            </para>
            <para>
            For more advanced scenarios, you can also use: <see cref="P:SharpGLTF.Schema2.WriteSettings.ImageWriteCallback"/>
            </para>
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.Image.GetSatelliteContent">
            <summary>
            Retrieves the image file as a segment of bytes.
            </summary>
            <returns>A <see cref="T:System.ArraySegment`1"/> segment containing the image file, which can be a PNG, JPG, DDS, WEBP or KTX2 format.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Image.SetSatelliteContent(SharpGLTF.Memory.MemoryImage)">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Image"/> with an image stored in a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="content">A <see cref="T:System.Byte"/> array containing a PNG or JPEG image.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Image.TransferToInternalBuffer">
            <summary>
            If the image is stored externaly as an image file,
            it creates a new BufferView and stores the image in the BufferView.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Image._WriteToInternal">
            <summary>
            Called internally by the serializer when the image content is to be embedded into the JSON document.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Image._WriteToSatellite(SharpGLTF.Schema2.WriteContext,System.String)">
            <summary>
            Called internally by the serializer when the image content is to be written as an external file
            </summary>
            <param name="writer">The satellite asset writer</param>
            <param name="satelliteUri">A local satellite URI</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Image._ClearAfterWrite">
            <summary>
            Called by the serializer immediatelly after
            calling <see cref="M:SharpGLTF.Schema2.Image._WriteToSatellite(SharpGLTF.Schema2.WriteContext,System.String)"/>
            or <see cref="M:SharpGLTF.Schema2.Image._WriteToInternal"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.IAnimationSampler`1">
            <summary>
            Represents an interface to a curve made of time-value points.
            </summary>
            <typeparam name="T">The curve point value type.</typeparam>
        </member>
        <member name="P:SharpGLTF.Schema2.IAnimationSampler`1.InterpolationMode">
            <summary>
            Gets a value indicating the interpolation being used.
            If the value is <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.STEP"/> or <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.LINEAR"/>, <see cref="M:SharpGLTF.Schema2.IAnimationSampler`1.GetLinearKeys"/> should be used.
            If the value is <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.CUBICSPLINE"/>, <see cref="M:SharpGLTF.Schema2.IAnimationSampler`1.GetCubicKeys"/> should be used.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.IAnimationSampler`1.GetLinearKeys">
            <summary>
            Gets the linear animation entries for <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.STEP"/> and <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.LINEAR"/> modes.
            </summary>
            <returns>A sequence of Time-Value keys.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.IAnimationSampler`1.GetCubicKeys">
            <summary>
            Gets the cubic animation entries fot <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.CUBICSPLINE"/> mode.
            </summary>
            <returns>A sequence of Time-(TangentIn,Value,TangentOut) keys.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.IAnimationSampler`1.CreateCurveSampler(System.Boolean)">
            <summary>
            Creates an interpolation sampler that can be used to query the value of the curve at any time.
            </summary>
            <param name="isolateMemory">
            If true, this call will do an internal copy of the curve data,
            so it will not reference the source date in the original document.
            </param>
            <returns>An object that can be used to sample the curve at any time.</returns>
            <remarks>
            When <paramref name="isolateMemory"/> is true, it also arranges the data so it's much
            faster to query.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2._StaticBufferBuilder">
            <summary>
            Utility class to merge BufferViews into a single big buffer
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.ICamera">
            <summary>
            Common interface for <see cref="T:SharpGLTF.Schema2.CameraOrthographic"/> and <see cref="T:SharpGLTF.Schema2.CameraPerspective"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.ExtensionsFactory">
            <summary>
            Global extensions manager.
            </summary>
            <remarks>
            Extensions must be registered at the beginning of the application<br/>
            Before using the APIs.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtensionsFactory.RegisterExtension``2(System.String)">
            <summary>
            Registers a new extensions to be used globally.
            </summary>
            <typeparam name="TParent">The parent type to which this extension is attached.</typeparam>
            <typeparam name="TExtension">The extension type.</typeparam>
            <param name="persistentName">The extension name.</param>
            <remarks>
            The <paramref name="persistentName"/> is the value used for serialization<br/>
            and it must meet <see href="https://github.com/KhronosGroup/glTF/blob/master/extensions/Prefixes.md">extension naming constraints</see>.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtensionsFactory.Create(SharpGLTF.IO.JsonSerializable,System.String)">
            <summary>
            Creates an extension object based on the parent object and the extension code.
            </summary>
            <param name="parent">The parent object that will own the created object.</param>
            <param name="extensionName">The extension code, like "KHR_texture_transform".</param>
            <returns>The created object, or null.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtensionsFactory.Identify(System.Type,System.Type)">
            <summary>
            Given a parentType and an extensionType, it identifies the extension code name.
            </summary>
            <param name="parentType">The type of the parent object.</param>
            <param name="extensionType">The type of the extension object.</param>
            <returns>An extension identifier code, like "KHR_texture_transform".</returns>
            <remarks>
            Extensions must be registered in advanced using <see cref="M:SharpGLTF.Schema2.ExtensionsFactory.RegisterExtension``2(System.String)"/>.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2.ExtraProperties">
            <summary>
            Represents the base class for all glTF 2 Schema objects.
            </summary>
            <remarks>
            Defines the <see cref="P:SharpGLTF.Schema2.ExtraProperties.Extras"/> property for every glTF object.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.ExtraProperties.Extensions">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.IO.JsonSerializable"/> instances.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ExtraProperties.Extras">
            <summary>
            Gets or sets the extras content of this instance.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.GetLogicalChildren">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.ExtraProperties"/> instances stored by this object.
            </summary>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.ExtraProperties"/> instances.</returns>
            <remarks>
            This is used to traverse the whole glTF document tree and gather all the objects<br/>
            So we can identify which extensions are used anywhere in the document.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.SerializeProperties(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes the properties of the current instance to a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <param name="writer">The target writer.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.DeserializeProperty(System.String,System.Text.Json.Utf8JsonReader@)">
            <summary>
            Reads the properties of the current instance from a <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
            <param name="property">The name of the property.</param>
            <param name="reader">The source reader.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialChannel">
            <summary>
            Represents a material sub-channel, which usually contains a texture.<br/>
            Use <see cref="P:SharpGLTF.Schema2.Material.Channels"/> and <see cref="M:SharpGLTF.Schema2.Material.FindChannel(System.String)"/> to access it.
            </summary>
            <remarks>
            This structure is not part of the gltf schema,
            but wraps several components of the material
            to have an homogeneous and easy to use API.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.MaterialChannel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SharpGLTF.Schema2.MaterialChannel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:SharpGLTF.Schema2.MaterialChannel.Parameter">
            <summary>
            Gets or sets the <see cref="T:System.Numerics.Vector4"/> parameter of this channel.
            The meaning of the <see cref="F:System.Numerics.Vector4.X"/>, <see cref="F:System.Numerics.Vector4.Y"/>. <see cref="F:System.Numerics.Vector4.Z"/> and <see cref="F:System.Numerics.Vector4.W"/>
            depend on the type of channel.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MaterialChannel.Texture">
            <summary>
            Gets the <see cref="P:SharpGLTF.Schema2.MaterialChannel.Texture"/> instance used by this Material, or null.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MaterialChannel.TextureCoordinate">
            <summary>
            Gets the index of texture's TEXCOORD_[index] attribute used for texture coordinate mapping.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.IMaterialParameter">
            <summary>
            A parameter accessor interface
            </summary>
            <remarks>
            Implemented by <see cref="!:_MaterialParameter&lt;&gt;"/>
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.IMaterialParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
            <remarks>
            The value must be one of the internal enum <see cref="T:SharpGLTF.Schema2._MaterialParameterKey"/>
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.IMaterialParameter.IsDefault">
            <summary>
            Gets a value indicating whether the current value is the default value.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.IMaterialParameter.ValueType">
            <summary>
            Gets the type of <see cref="P:SharpGLTF.Schema2.IMaterialParameter.Value"/><br/>Which can be <see cref="T:System.Single"/> <see cref="T:System.Numerics.Vector3"/> and <see cref="T:System.Numerics.Vector4"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.IMaterialParameter.Value">
            <summary>
            Gets or sets the value of this parameter.<br/>
            Valid types are <see cref="T:System.Single"/> <see cref="T:System.Numerics.Vector3"/> and <see cref="T:System.Numerics.Vector4"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.IVisualNodeContainer">
            <summary>
            Represents an abstract interface for a visual hierarchy.
            Implemented by <see cref="T:SharpGLTF.Schema2.Node"/> and <see cref="T:SharpGLTF.Schema2.Scene"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.NodeCurveSamplers">
            <summary>
            Represents an proxy to acccess the animation curves of a <see cref="T:SharpGLTF.Schema2.Node"/>.
            Use <see cref="M:SharpGLTF.Schema2.Node.GetCurveSamplers(SharpGLTF.Schema2.Animation)"/> for access.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.NodeCurveSamplers.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SharpGLTF.Schema2.NodeCurveSamplers.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SharpGLTF.Schema2.NodeCurveSamplers.Equals(SharpGLTF.Schema2.NodeCurveSamplers)">
            <inheritdoc />
        </member>
        <member name="P:SharpGLTF.Schema2.NodeCurveSamplers.HasTransformCurves">
            <summary>
            True if any of <see cref="P:SharpGLTF.Schema2.NodeCurveSamplers.Scale"/>, <see cref="P:SharpGLTF.Schema2.NodeCurveSamplers.Rotation"/> or <see cref="P:SharpGLTF.Schema2.NodeCurveSamplers.Translation"/> is defined.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.NodeCurveSamplers.HasMorphingCurves">
            <summary>
            True if there's a morphing curve.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.NodeCurveSamplers.Scale">
            <summary>
            Gets the Scale sampler, or null if there's no curve defined.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.NodeCurveSamplers.Rotation">
            <summary>
            Gets the Rotation sampler, or null if there's no curve defined.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.NodeCurveSamplers.Translation">
            <summary>
            Gets the Translation sampler, or null if there's no curve defined.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.NodeCurveSamplers.Morphing">
            <summary>
            Gets the raw Morphing sampler, or null if there's no curve defined.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.NodeCurveSamplers.MorphingSparse">
            <summary>
            Gets the SparseWeight8 Morphing sampler, or null if there's no curve defined.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.NodeCurveSamplers.GetMorphingSampler``1">
            <summary>
            Gets the morphing sampler, or null if there's no curve defined.
            </summary>
            <typeparam name="TWeights">
            It must be one of these:<br/>
            <list type="table">
            <item><see cref="T:System.Single"/>[]</item>
            <item><see cref="T:SharpGLTF.Transforms.SparseWeight8"/></item>
            <item><see cref="T:System.ArraySegment`1"/> of <see cref="T:System.Single"/></item>
            </list>
            </typeparam>
            <returns>A valid sampler, or null.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.PunctualLightType">
            <summary>
            Defines all the types of <see cref="T:SharpGLTF.Schema2.PunctualLight"/> types.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.IConvertibleToGltf2">
            <summary>
            Defines a method that converts the implementing reference to a <see cref="T:SharpGLTF.Schema2.ModelRoot"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2._BinarySerialization.IsBinaryCompatible(SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Tells if a given model can be stored as Binary format.
            </summary>
            <param name="model">the model to test</param>
            <returns>null if it can be stored as binary, or an exception object if it can't</returns>
            <remarks>
            Due to the limitations of Binary Format, not all models can be saved as Binary.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2._BinarySerialization.WriteBinaryModel(System.IO.BinaryWriter,SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Writes a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="binaryWriter">The destination <see cref="T:System.IO.BinaryWriter"/> stream.</param>
            <param name="model">The source <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.FileReaderCallback">
            <summary>
            Callback used for loading associated files of current model.
            </summary>
            <param name="assetName">the asset relative path.</param>
            <returns>The file contents as a <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.ReadContext">
            <summary>
            Context for reading a <see cref="T:SharpGLTF.Schema2.ModelRoot"/>.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ReadContext._UriResolver">
            <summary>
            Unescapes glTF asset URIs so they can be consumed by <see cref="F:SharpGLTF.Schema2.ReadContext._FileReader"/>
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ReadContext._FileReader">
            <summary>
            Retrieves file blobs from the current context.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ReadContext._BinaryChunk">
            <summary>
            When loading a GLB, this represents the internal binary data chunk.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ReadContext._CheckSupportedExtensions">
            <summary>
            Gets a value indicating whether to check used/required extensions.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.ReadContext.OpenFile(System.String)">
            <summary>
            Opens a file relative to this <see cref="T:SharpGLTF.Schema2.ReadContext"/>.
            </summary>
            <param name="resourceName">A relative file Name path.</param>
            <returns>A <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ReadContext.ReadSchema2(System.String)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from the current context containing a GLB or a GLTF file.
            </summary>
            <param name="resourceName">The name of the resource within the context.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ReadContext.ReadSchema2(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> containing a GLB or a GLTF file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ReadContext.ReadTextSchema2(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> containing a GLTF file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ReadContext.ReadBinarySchema2(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> containing a GLB file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ReadContext.IdentifyBinaryContainer(System.IO.Stream)">
            <summary>
            Tries to identify a stream as a text (glTF) or binary (GLB) format.
            </summary>
            <param name="stream">An open <see cref="T:System.IO.Stream"/> where <see cref="P:System.IO.Stream.CanSeek"/> must be true.</param>
            <returns>True if it's a binary GLB format.</returns>
            <remarks>
            After identification, the <see cref="P:System.IO.Stream.Position"/> will be reset to the position it had before calling this method.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2.ImageDecodeCallback">
            <summary>
            Callback used to intercept the loading of textures so they can be
            decoded by the client engine and uploaded to the GPU if neccesary.
            </summary>
            <param name="image">The Image containing the texture</param>
            <returns>
            True if we want to keep the image memory data inside <see cref="T:SharpGLTF.Schema2.Image"/>.<br/>
            Otherwise the memory will be cleared and <see cref="T:SharpGLTF.Schema2.Image"/> will be empty.
            </returns>
        </member>
        <member name="T:SharpGLTF.Schema2.JsonFilterCallback">
            <summary>
            Callback used to preprocess and postprocess json before reading and after writing.
            </summary>
            <param name="json">The source json text.</param>
            <returns>The processed json text.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.ReadSettings">
            <summary>
            Read settings and base class of <see cref="T:SharpGLTF.Schema2.ReadContext"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ReadSettings.Validation">
            <summary>
            Gets or sets a value indicating the level of validation applied when loading a file.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ReadSettings.ImageDecoder">
            <summary>
            Gets or sets the callback used to decode the textures as they're loaded.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ReadSettings.JsonPreprocessor">
            <summary>
            Gets or sets the callback used to preprocess the json text before parsing it.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.FileWriterCallback">
            <summary>
            Callback used for saving associated files of the current model.
            </summary>
            <param name="assetName">The asset relative path.</param>
            <param name="assetData">The file contents as a <see cref="T:System.Byte"/> array.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.ImageWriterCallback">
            <summary>
            Callback to control the image writing behavior.
            </summary>
            <param name="context">The current model writing context.</param>
            <param name="assetName">The default gltf URI used to reference the image.</param>
            <param name="image">The image to write.</param>
            <returns>The final glTF URI. If it didn't change, return the value of <para name="assetName"/>.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.WriteContext">
            <summary>
            Configuration settings for writing model files.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.WriteContext.WithDeepCloneSettings">
            <summary>
            These settings are used exclusively by <see cref="M:SharpGLTF.Schema2.ModelRoot.DeepClone"/>.
            </summary>
            <returns>A <see cref="T:SharpGLTF.Schema2.WriteContext"/> instance to be used by <see cref="M:SharpGLTF.Schema2.ModelRoot.DeepClone"/></returns>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteContext._UpdateSupportedExtensions">
            <summary>
            Gets a value indicating whether to scan the whole model for used extensions.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteContext._NoCloneWatchdog">
            <summary>
            Gets a value indicating whether creating a defensive copy before serialization is not allowed.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.WriteContext.WriteTextSchema2(System.String,SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Writes <paramref name="model"/> to this context using the glTF json container.
            </summary>
            <param name="baseName">The base name to use for asset files, without extension.</param>
            <param name="model">The <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to write.</param>
            <remarks>
            If the model has associated resources like binary assets and textures,<br/>
            these additional resources will be also written as associated files using the pattern:<br/>
            <br/>
            "<paramref name="baseName"/>.{Number}.bin|png|jpg|dds"
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.WriteContext.WriteBinarySchema2(System.String,SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Writes <paramref name="model"/> to this context using the GLB binary container.
            </summary>
            <param name="baseName">The base name to use for asset files, without extension.</param>
            <param name="model">The <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to write.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.WriteContext._ValidateBeforeWriting(SharpGLTF.Schema2.ModelRoot)">
            <summary>
            This needs to be called immediately before writing to json,
            but immediately after preprocessing and buffer setup, so the model can be correctly validated.
            </summary>
            <param name="model">The model to validate.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.WriteContext._PreprocessSchema2(SharpGLTF.Schema2.ModelRoot,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Prepares the model for writing with the appropiate settings, creating a defensive copy if neccesary.
            </summary>
            <param name="model">The source <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</param>
            <param name="imagesAsBufferViews">true if images should be stored as buffer views.</param>
            <param name="mergeBuffers">true if it's required the model must have a single buffer.</param>
            <param name="buffersMaxSize">When merging buffers, the max buffer size</param>
            <returns>The source <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance, or a cloned and modified instance if current settings required it.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.ResourceWriteMode">
            <summary>
            Determines how resources are written.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.Default">
            <summary>
            Use the most appropiate mode.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.SatelliteFile">
            <summary>
            Resources will be stored as external satellite files.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.EmbeddedAsBase64">
            <summary>
            Resources will be embedded into the JSON encoded in Base64.
            </summary>
            <remarks>
            When writing to GLB this does not have any effect.<br/>
            This flag only has effect with images, not with binary blobs.
            </remarks>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.BufferView">
            <summary>
            Resources will be stored as internal binary buffers. Valid only for <see cref="T:SharpGLTF.Schema2.Image"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.WriteSettings">
            <summary>
            Write settings and base class of <see cref="T:SharpGLTF.Schema2.WriteContext"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.ImageWriting">
            <summary>
            Gets or sets a value indicating how to write the images of the model.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.ImageWriteCallback">
            <summary>
            Gets or sets a callback hook that controls the image writing behavior.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.MergeBuffers">
            <summary>
            Gets or sets a value indicating whether to merge all the buffers in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/> into a single buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.BuffersMaxSize">
            <summary>
            Gets or sets the size used to split all the resources into individual buffers.
            </summary>
            <remarks>
            It only has an effect when these conditions are met:
            <list type="table">
            <item><see cref="P:SharpGLTF.Schema2.WriteSettings.MergeBuffers"/> must be true.</item>
            <item>Output format must be glTF, not GLB</item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.JsonIndented">
            <summary>
            Gets or sets a value indicating whether the JSON formatting will include indentation.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.JsonOptions">
            <summary>
            Gets or sets a value indicating the Json options to be used for writing.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.Validation">
            <summary>
            Gets or sets a value indicating the level of validation applied when loading a file.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.JsonPostprocessor">
            <summary>
            Gets or sets the callback used to postprocess the json text before parsing it.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2._Schema2Extensions">
            <summary>
            Extensions used internally.
            </summary>
        </member>
        <member name="T:SharpGLTF.Transforms.AffineTransform">
            <summary>
            Represents an affine transform in 3D space, with two mutually exclusive representantions:<br/>
            <list type="bullet">
            <item>
            As a 4x3 Matrix. When <see cref="P:SharpGLTF.Transforms.AffineTransform.IsMatrix"/> is true.<br/>
            Publicly exposed as <see cref="P:SharpGLTF.Transforms.AffineTransform.Matrix"/>.
            </item>
            <item>
            As a Scale/Rotation/Translation chain. When <see cref="P:SharpGLTF.Transforms.AffineTransform.IsSRT"/> is true.<br/>
            Publicly exposed as: <see cref="P:SharpGLTF.Transforms.AffineTransform.Scale"/>, <see cref="P:SharpGLTF.Transforms.AffineTransform.Rotation"/>, <see cref="P:SharpGLTF.Transforms.AffineTransform.Translation"/>.
            </item>
            </list>
            </summary>
            <remarks>
            <para>
            Depending on how <see cref="T:SharpGLTF.Transforms.AffineTransform"/> structures are created, the underlaying<br/>
            fields must be interpreted as a Matrix4x3 or a Scale/Rotation/Translation chain.
            </para>
            <para>
            This approach allows <see cref="T:SharpGLTF.Transforms.AffineTransform"/> preserving the source transform, avoiding loosing<br/>
            precission when decomposing a matrix, or creating a matrix from a SRT chain.
            </para>
            <para>
            Decomposing matrices is tricky because not all valid matrices can be decomposed; in particular<br/>
            squewed matrices will fail to decompose. See <see href="https://github.com/vpenades/SharpGLTF/issues/41"/>.
            </para>
            </remarks>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._Representation">
            <summary>
            Determines what's represented by the data fields:<br/>
            <list type="bullet">
            <item><see cref="F:SharpGLTF.Transforms.AffineTransform.DATA_UNDEFINED"/> - Not defined.</item>
            <item><see cref="F:SharpGLTF.Transforms.AffineTransform.DATA_MAT"/> - Fields must be interpreted as a 4x3 Matrix.</item>
            <item><see cref="F:SharpGLTF.Transforms.AffineTransform.DATA_SRT"/> - Fields must be interpreted as a Scale, Rotation and Translation chain.</item>
            </list>
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M11">
            <summary>
            Matrix:  M11<br/>
            SRT: Scale.X
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M12">
            <summary>
            Matrix:  M12<br/>
            SRT: Scale.Y
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M13">
            <summary>
            Matrix:  M13<br/>
            SRT: Scale.Z
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M21">
            <summary>
            Matrix:  M21<br/>
            SRT: Rotation.X
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M22">
            <summary>
            Matrix:  M22<br/>
            SRT: Rotation.Y
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M23">
            <summary>
            Matrix:  M23<br/>
            SRT: Rotation.Z
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M31">
            <summary>
            Matrix:  M31<br/>
            SRT: Rotation.W
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M32">
            <summary>
            Matrix:  M32<br/>
            SRT: unused
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._M33">
            <summary>
            Matrix:  M32<br/>
            SRT: unused
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform._Translation">
            <summary>
            Matrix and SRT: Translation
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.Equals(SharpGLTF.Transforms.AffineTransform)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.AreGeometricallyEquivalent(SharpGLTF.Transforms.AffineTransform@,SharpGLTF.Transforms.AffineTransform@,System.Single)">
            <summary>
            Checks whether two transform represent the same geometric spatial transformation.
            </summary>
            <param name="a">the first transform to check.</param>
            <param name="b">the second transform to check.</param>
            <param name="tolerance">the tolerance to handle floating point error.</param>
            <returns>true if both transforms can be considered geometryically equivalent.</returns>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.IsMatrix">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Transforms.AffineTransform"/> represents a <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.IsSRT">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Transforms.AffineTransform"/> represents a SRT chain.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.Scale">
            <summary>
            Gets the scale.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When the internal representation is a Matrix and cannot be decomposed.
            </exception>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.Rotation">
            <summary>
            Gets the rotation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When the internal representation is a Matrix and cannot be decomposed.
            </exception>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.Translation">
            <summary>
            Gets the translation
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.Matrix">
            <summary>
            Gets the <see cref="T:System.Numerics.Matrix4x4"/> transform of the current <see cref="T:SharpGLTF.Transforms.AffineTransform"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.IsLosslessDecomposable">
            <summary>
            Gets a value indicating whether this transform can be decomposed to SRT without precission loss.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.GetDecomposed">
            <summary>
            If this object represents a <see cref="T:System.Numerics.Matrix4x4"/>, it returns a decomposed representation.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The matrix cannot be decomposed.</exception>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.Multiply(SharpGLTF.Transforms.AffineTransform@,SharpGLTF.Transforms.AffineTransform@)">
            <summary>
            Multiplies <paramref name="a"/> by <paramref name="b"/>.
            </summary>
            <param name="a">The left transform.</param>
            <param name="b">The right transform.</param>
            <returns>
            <para>A new <see cref="T:SharpGLTF.Transforms.AffineTransform"/> structure.</para>
            <para>
            The returned value will use a decomposed<br/>
            representation it these two conditions are met:<br/>
            <list type="number">
            <item>Arguments <paramref name="a"/> and <paramref name="b"/> are also in decomposed form.</item>
            <item>The result of the operation is decomposable.</item>
            </list>
            Otherwise the returned value will use a Matrix representation.
            </para>
            </returns>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.TryInvert(SharpGLTF.Transforms.AffineTransform@,SharpGLTF.Transforms.AffineTransform@)">
            <summary>
            Inverts the specified transform. The return value indicates whether the operation succeeded.
            </summary>
            <remarks>
            SRT format with uneven scale can produce results that differ from a matrix
            </remarks>
            <param name="xform">The transform to invert.</param>
            <param name="inverse">The inverted result.</param>
            <returns>True if the operation succeeds.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.Transform(System.Numerics.Vector3,SharpGLTF.Transforms.AffineTransform@)">
            <summary>
            Transforms a vector by a specified transform.
            </summary>
            <param name="vector">The vector to transform.</param>
            <param name="xform">The transform to apply.</param>
            <returns>The transformed vector.</returns>        
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.TransformNormal(System.Numerics.Vector3,SharpGLTF.Transforms.AffineTransform@)">
            <summary>
            Transforms a vector normal by a specified transform.
            </summary>
            <param name="vector">The vector to transform.</param>
            <param name="xform">The transform to apply.</param>
            <returns>The transformed vector.</returns>        
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform._Vector3Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
            <summary>
            This method is equivalent to System.Numerics.Vector3.Transform(Vector3 v, Quaternion q)
            </summary>        
            <param name="v">The vector to transform</param>
            <param name="q">The transform rotation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.IndexWeight.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.IndexWeight.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.IndexWeight.Equals(SharpGLTF.Transforms.IndexWeight)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.IndexWeight.IsWellFormed(System.ReadOnlySpan{SharpGLTF.Transforms.IndexWeight},System.String@)">
            <summary>
            Checks if the collection of <see cref="T:SharpGLTF.Transforms.IndexWeight"/> pairs is well formed.
            </summary>
            <remarks>
            A collection is considered malformed when:<br/>
            <list type="bullet">
            <item>Weightless Items have indices different than zero.</item>
            <item>The same index appears more than once.</item>
            </list>
            Indices are not required to be sorted in any order.
            </remarks>
            <param name="iw">The collection of pairs.</param>
            <param name="err">the error message when is malformed.</param>
            <returns>True if collection is wellformed. False otherwise.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.IndexWeight.InsertSorted(System.Span{SharpGLTF.Transforms.IndexWeight},System.Int32,SharpGLTF.Transforms.IndexWeight)">
            <summary>
            Adds the given <see cref="T:SharpGLTF.Transforms.IndexWeight"/> pair to the given collection,<br/>
            trying to keep the collection sorted.
            </summary>
            <param name="buffer">The destination buffer, which might be larger than the collection.</param>
            <param name="length">The current collecion length.</param>
            <param name="item">The <see cref="T:SharpGLTF.Transforms.IndexWeight"/> pair to add.</param>
            <returns>The new collection length.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.IndexWeight.InsertUnsorted(System.Span{SharpGLTF.Transforms.IndexWeight},System.Int32,SharpGLTF.Transforms.IndexWeight)">
            <summary>
            Adds the given <see cref="T:SharpGLTF.Transforms.IndexWeight"/> pair to the given collection.
            </summary>
            <param name="buffer">The destination buffer, which might be larger than the collection.</param>
            <param name="length">The current collecion length.</param>
            <param name="item">The <see cref="T:SharpGLTF.Transforms.IndexWeight"/> pair to add.</param>
            <returns>The new collection length.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Matrix4x4 from the given components.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="xPosition">The amount to translate on the X-axis.</param>
            <param name="yPosition">The amount to translate on the Y-axis.</param>
            <param name="zPosition">The amount to translate on the Z-axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.CreateFromQuaternion(System.Numerics.Quaternion)">
            <summary>
            Creates a rotation matrix from the given Quaternion rotation value.
            </summary>
            <param name="quaternion">The source Quaternion.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Explicit(SharpGLTF.Transforms.Matrix4x4Double)~System.Numerics.Matrix4x4">
            <summary>
            Converts a <see cref="T:SharpGLTF.Transforms.Matrix4x4Double"/> to a <see cref="T:System.Numerics.Matrix4x4"/>
            </summary>
            <param name="mat">The matrix to convert.</param>
            <remarks>
            Since converting From double precission to single precission
            implies a loss of precission, this conversion is explicit, so
            developers will be aware of when the precission loss is happening.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Implicit(System.Numerics.Matrix4x4)~SharpGLTF.Transforms.Matrix4x4Double">
            <summary>
            converts from <see cref="T:System.Numerics.Matrix4x4"/> to <see cref="T:SharpGLTF.Transforms.Matrix4x4Double"/>
            </summary>
            <param name="mat">The matrix to convert.</param>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M13">
            <summary>
            Value at row 1, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M14">
            <summary>
            Value at row 1, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M24">
            <summary>
            Value at row 2, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M33">
            <summary>
            Value at row 3, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M34">
            <summary>
            Value at row 3, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M41">
            <summary>
            Value at row 4, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M42">
            <summary>
            Value at row 4, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M43">
            <summary>
            Value at row 4, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M44">
            <summary>
            Value at row 4, column 4 of the matrix.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Equality(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Returns a boolean indicating whether the given two matrices are equal.
            </summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Inequality(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Returns a boolean indicating whether the given two matrices are not equal.
            </summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Equals(SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Returns a boolean indicating whether this matrix instance is equal to the other given matrix.
            </summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this matrix instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="P:SharpGLTF.Transforms.Matrix4x4Double.Identity">
            <summary>
            Returns the multiplicative identity matrix.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.Matrix4x4Double.Translation">
            <summary>
            Gets or sets the translation component of this matrix.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Invert(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double@)">
            <summary>
            Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.
            </summary>
            <param name="matrix">The source matrix to invert.</param>
            <param name="result">If successful, contains the inverted matrix.</param>
            <returns>True if the source matrix could be inverted; False otherwise.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Multiply(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Multiply(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.Finite">
            <summary>
            All members of the matrix must be finite numbers.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.NonZero">
            <summary>
            the matrix must not be all zeros.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.Identity">
            <summary>
            The matrix must be the identity matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.IdentityColumn4">
            <summary>
            The forth column of the matrix must be defined with EXACT values: [0,0,0,1].
            See <see href="https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#skins-overview">glTF spec</see>
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.Invertible">
            <summary>
            The matrix must be invertible as in <see cref="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)"/>.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.Decomposable">
            <summary>
            The matrix must be decomposable as in <see cref="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)"/>.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.PositiveDeterminant">
            <summary>
            The matrix must have a positive determinant.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.LocalTransform">
            <summary>
            A local matrix must be invertible and decomposable to Scale-Rotation-Translation.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.WorldTransform">
            <remarks>
            A world matrix can be built from a concatenation of local tranforms.<br/>
            Which means it can be a squeezed matrix, and not decomposable.
            </remarks>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Factory.MatrixCheck.InverseBindMatrix">
            <summary>
            Since an inverse bind matrix is built from the inverse of a WorldMatrix,
            the same rules apply.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Factory.CreateFrom(System.Nullable{System.Numerics.Matrix4x4},System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Quaternion},System.Nullable{System.Numerics.Vector3})">
            <summary>
            Evaluates a <see cref="T:System.Numerics.Matrix4x4"/> transform based on the available parameters.
            </summary>
            <param name="transform">A <see cref="T:System.Numerics.Matrix4x4"/> instance, or null.</param>
            <param name="scale">A <see cref="T:System.Numerics.Vector3"/> instance, or null.</param>
            <param name="rotation">A <see cref="T:System.Numerics.Quaternion"/> instance, or null.</param>
            <param name="translation">A <see cref="T:System.Numerics.Vector3"/> instance, or null.</param>
            <returns>A <see cref="T:System.Numerics.Matrix4x4"/> transform.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Factory.NormalizeMatrix(System.Numerics.Matrix4x4@)">
            <summary>
            Normalizes the axis of the given matrix, to make it orthogonal.
            </summary>
            <param name="xform">The <see cref="T:System.Numerics.Matrix4x4"/> to normalize.</param>
        </member>
        <member name="T:SharpGLTF.Transforms.IGeometryTransform">
            <summary>
            Interface for a vertex transform object
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.IGeometryTransform.Visible">
            <summary>
            Gets a value indicating whether the current <see cref="T:SharpGLTF.Transforms.IGeometryTransform"/> will render visible geometry.
            </summary>
            <remarks>
            When this value is false, a runtime should skip rendering any geometry using
            this <see cref="T:SharpGLTF.Transforms.IGeometryTransform"/> instance, since it will not be visible anyway.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Transforms.IGeometryTransform.FlipFaces">
            <summary>
            Gets a value indicating whether the triangles need to be flipped to render correctly.
            </summary>
            <remarks>
            When this value is true, a runtime rendering triangles should inverse the face culling.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Transforms.IGeometryTransform.TransformPosition(System.Numerics.Vector3,System.Collections.Generic.IReadOnlyList{System.Numerics.Vector3},SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Transforms a vertex position from local mesh space to world space.
            </summary>
            <param name="localPosition">The local position of the vertex.</param>
            <param name="positionDeltas">The local position deltas of the vertex, one for each morph target, or null.</param>
            <param name="skinWeights">The skin weights of the vertex, or default.</param>
            <returns>A position in world space.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.IGeometryTransform.TransformNormal(System.Numerics.Vector3,System.Collections.Generic.IReadOnlyList{System.Numerics.Vector3},SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Transforms a vertex normal from local mesh space to world space.
            </summary>
            <param name="localNormal">The local normal of the vertex.</param>
            <param name="normalDeltas">The local normal deltas of the vertex, one for each morph target, or null.</param>
            <param name="skinWeights">The skin weights of the vertex, or default.</param>
            <returns>A normal in world space.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.IGeometryTransform.TransformTangent(System.Numerics.Vector4,System.Collections.Generic.IReadOnlyList{System.Numerics.Vector3},SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Transforms a vertex tangent from local mesh space to world space.
            </summary>
            <param name="tangent">The tangent normal of the vertex.</param>
            <param name="tangentDeltas">The local tangent deltas of the vertex, one for each morph target, or null.</param>
            <param name="skinWeights">The skin weights of the vertex, or default.</param>
            <returns>A tangent in world space.</returns>
        </member>
        <member name="P:SharpGLTF.Transforms.IGeometryInstancing.WorldTransforms">
            <summary>
            Gets the list of instances produced by this transform.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.MorphTransform._Weights">
            <summary>
            Represents a sparse collection of weights where:
            - Index of value <see cref="F:SharpGLTF.Transforms.MorphTransform.COMPLEMENT_INDEX"/> points to the Mesh master positions.
            - All other indices point to Mesh MorphTarget[index] positions.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.MorphTransform._AbsoluteMorphTargets">
            <summary>
            True if morph targets represent absolute values.
            False if morph targets represent values relative to master value.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.MorphTransform.MorphWeights">
            <summary>
            Gets the current morph weights to use for morph target blending. <see cref="F:SharpGLTF.Transforms.MorphTransform.COMPLEMENT_INDEX"/> represents the index for the base geometry.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.MorphTransform.AbsoluteMorphTargets">
            <summary>
            Gets a value indicating whether morph target values are absolute, and not relative to the master value.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.SkinnedTransform.SkinMatrices">
            <summary>
            Gets the collection of the current, final matrices to use for skinning
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.SkinnedTransform.CalculateInverseBinding(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Calculates the inverse bind matrix to use for runtime skinning.
            </summary>
            <param name="meshWorldTransform">The world space <see cref="T:System.Numerics.Matrix4x4"/> of the mesh at the time of binding (POSE).</param>
            <param name="jointWorldTransform">The world space <see cref="T:System.Numerics.Matrix4x4"/> of the given bone joint at the time of binding (POSE).</param>
            <returns>A <see cref="T:System.Numerics.Matrix4x4"/> representing the inverse bind transform.</returns>
        </member>
        <member name="P:SharpGLTF.Transforms.InstancingTransform.InstancesCount">
            <inheritdoc/>
        </member>
        <member name="P:SharpGLTF.Transforms.InstancingTransform.LocalMatrices">
            <summary>
            Gets the local matrices for every instanced mesh
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.InstancingTransform.WorldTransforms">
            <inheritdoc/>
        </member>
        <member name="T:SharpGLTF.Transforms.Projection">
            <summary>
            Utility class to calculate camera matrices
            </summary>
            <see href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#projection-matrices"/>
        </member>
        <member name="M:SharpGLTF.Transforms.Projection.CreateOrthographicMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates an orthographic projection matrix.
            </summary>
            <param name="xmag">Magnification in the X axis.</param>
            <param name="ymag">Magnification in the Y axis.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis.</param>
            <returns>A projection matrix</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Projection.CreatePerspectiveMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates a perspective projection matrix.
            </summary>
            <param name="aspectRatio">The aspect ratio between horizontal and vertical. (optional)</param>
            <param name="yfov">The vertical field of view, in radians.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis. Optionally, this value can be positive infinity</param>
            <returns>A projection matrix</returns>
        </member>
        <member name="T:SharpGLTF.Transforms.SparseWeight8">
            <summary>
            Represents a sparse collection of non zero weight values, with a maximum of 8 weights.
            </summary>
            <remarks>
            <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> is being used in two different contexts:<br/>
            <list type="bullet">
            <item>As an utility structure to define per vertex joint weights in mesh skinning.</item>
            <item>As an animation key in morph targets; a mesh can have many morph targets,
            but realistically and due to GPU limitations, only up to 8 morph targets can
            be blended at the same time.
            </item>
            </list>
            Constructors are designed so weightless values are not taken into account,<br/>
            and duplicated indices are merged, so indices are expected to be unique.
            <para>
            Use static Create* methods to construct instances of <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.
            </para>
            </remarks>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Single[])">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> from a weights collection.
            If there's more than 8 non zero values, the 8 most representative values are taken.
            </summary>
            <param name="weights">A sequence of weight values.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> from a weights collection.
            If there's more than 8 weighted values, the 8 heaviest values are taken.
            </summary>
            <param name="weights">A sequence of weight values.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.ValueTuple{System.Int32,System.Single}[])">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> from an indexed weight collection.
            If there's more than 8 weighted values, the 8 heaviest values are taken.
            </summary>
            <param name="indexedWeights">A sequence of indexed weight pairs.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Single}})">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> from an indexed weight collection.
            If there's more than 8 weighted values, the 8 heaviest values are taken.
            </summary>
            <param name="indexedWeights">A sequence of indexed weight pairs.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Numerics.Vector4@,System.Numerics.Vector4@)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct.
            </summary>
            <remarks>
            Repeating indices will have their weights merged.
            </remarks>
            <param name="idx0123">The indices of weights 0 to 3.</param>
            <param name="wgt0123">The weights of indices 0 to 3.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct.
            </summary>
            <remarks>
            Repeating indices will have their weights merged.
            </remarks>
            <param name="idx0123">The first 4 indices.</param>
            <param name="idx4567">The next 4 indices.</param>
            <param name="wgt0123">The first 4 weights.</param>
            <param name="wgt4567">The next 4 weights.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.CreateUnchecked(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct.
            </summary>
            <remarks>
            Unlike <see cref="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@)"/>, this method<br/>
            is a direct call to the constructor, so it's very fast. But it doesn't validate the input<br/>
            values, so it's intended to be used in limited scenarios, where performance is paramount.
            </remarks>
            <param name="idx0123">The first 4 indices.</param>
            <param name="idx4567">The next 4 indices.</param>
            <param name="wgt0123">The first 4 weights.</param>
            <param name="wgt4567">The next 4 weights.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.#ctor(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct.
            </summary>
            <param name="idx0123">The first 4 indices.</param>
            <param name="idx4567">The next 4 indices.</param>
            <param name="wgt0123">The first 4 weights.</param>
            <param name="wgt4567">The next 4 weights.</param>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.#ctor(System.ReadOnlySpan{SharpGLTF.Transforms.IndexWeight})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct.
            </summary>
            <param name="iw">A collection of 8 <see cref="T:SharpGLTF.Transforms.IndexWeight"/> pairs.</param>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.#ctor(SharpGLTF.Transforms.SparseWeight8@,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct<br/>
            from another instance, and multiplying the weights by a scale.
            </summary>
            <param name="sparse">The source <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Equals(SharpGLTF.Transforms.SparseWeight8)">
            <inheritdoc/>
        </member>
        <member name="P:SharpGLTF.Transforms.SparseWeight8.IsWeightless">
            <summary>
            Gets a value indicating whether all the weights in this <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> are zero.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.OrderedByWeight(SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Returns a copy of this <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> where all the
            indices have been reordered by weight in descending order.
            </summary>
            <param name="sparse">The <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> to get ordered.</param>
            <returns>A weight ordered <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.OrderedByIndex(SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Returns a copy of this <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> where all the
            indices have been reordered by index in ascending order.
            </summary>
            <param name="sparse">The <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> to get ordered.</param>
            <returns>An index ordered <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Add(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Adds <paramref name="x"/> with <paramref name="y"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Subtract(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Subtracts <paramref name="y"/> from <paramref name="x"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Multiply(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Multiplies <paramref name="x"/> with <paramref name="y"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Multiply(SharpGLTF.Transforms.SparseWeight8@,System.Single)">
            <summary>
            Multiplies <paramref name="x"/> with <paramref name="y"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.InterpolateLinear(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Single)">
            <summary>
            Interpolates Linearly <paramref name="x"/> with <paramref name="y"/> an <paramref name="amount"/>.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <param name="amount">The amount of <paramref name="y"/></param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.InterpolateCubic(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Single)">
            <summary>
            Interpolates (<paramref name="x"/> , <paramref name="xt"/>) with (<paramref name="y"/> , <paramref name="yt"/>) an <paramref name="amount"/>.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first value operand.</param>
            <param name="xt">The first tangent operand.</param>
            <param name="y">The second value operand.</param>
            <param name="yt">The second tangent operand.</param>
            <param name="amount">The amount of <paramref name="y"/></param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8._OperateLinear(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Performs <paramref name="operationFunc"/> over all the elements of the operands.
            </summary>
            <param name="x">The first <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="y">The second <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="operationFunc">The operator function to apply to every element.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8._OperateCubic(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Func{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Performs <paramref name="operationFunc"/> over all the elements of the operands.
            </summary>
            <param name="x">The first <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="y">The second <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="z">The third <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="w">The fourth <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="operationFunc">The operator function to apply to every element.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.GetNormalizedWithComplement(System.Int32)">
            <summary>
            Normalizes the current <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> by adding a complementary weight
            at index <paramref name="complementIndex"/> that resolves <see cref="P:SharpGLTF.Transforms.SparseWeight8.WeightSum"/> to 1.
            </summary>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> with a complementary weight.</returns>
        </member>
        <member name="T:SharpGLTF.Validation.ModelException">
            <summary>
            Represents an exception produced by the serialization or validation of a gltf model.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.SchemaException">
            <summary>
            Represents an exception produced by an invalid JSON document.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.SemanticException">
            <summary>
            Represents an esception produced by invalid values.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.LinkException">
            <summary>
            Represents an exception produced by invalid objects relationships.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.DataException">
            <summary>
            Represents an exception produced by invalid data.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.ValidationContext">
            <summary>
            Utility class used in the process of model validation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.ValidationMode">
            <summary>
            Defines validation modes for reading files.
            </summary>
        </member>
        <member name="F:SharpGLTF.Validation.ValidationMode.Skip">
            <summary>
            Skips validation completely.
            </summary>
            <remarks>
            <para>
            This mode is intended to be used in scenarios where you know the models you're loading are perfectly
            valid, and you want to skip validation because you want to speed up model loading.
            </para>
            <para>
            Using this mode for loading malformed glTF models is not supported nor recomended, because although the
            loading will not give any errors, it's impossible to guarantee the API will work correcly afterwards.
            </para>
            </remarks>
        </member>
        <member name="F:SharpGLTF.Validation.ValidationMode.TryFix">
            <summary>
            In some specific cases, the file can be fixed, at which point the errors successfully
            fixed will be reported as warnings.
            </summary>
        </member>
        <member name="F:SharpGLTF.Validation.ValidationMode.Strict">
            <summary>
            Full validation, any error throws an exception.
            </summary>
        </member>
        <member name="T:SharpGLTF._Extensions">
            <summary>
            Extensions used internally.
            </summary>
        </member>
    </members>
</doc>
